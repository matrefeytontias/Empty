// This file is auto-generated. Do not edit !

#include "Empty/gl/GLEnums.hpp"

#include <unordered_map>

static const std::unordered_map<Empty::gl::ContextCapability, const char*> ContextCapability_names = {
	{Empty::gl::ContextCapability::Blend, "Blend"},
	{Empty::gl::ContextCapability::ClipDistance, "ClipDistance"},
	{Empty::gl::ContextCapability::ColorLogicOp, "ColorLogicOp"},
	{Empty::gl::ContextCapability::CullFace, "CullFace"},
	{Empty::gl::ContextCapability::DebugOutput, "DebugOutput"},
	{Empty::gl::ContextCapability::DebugOutputSynchronous, "DebugOutputSynchronous"},
	{Empty::gl::ContextCapability::DepthClamp, "DepthClamp"},
	{Empty::gl::ContextCapability::DepthTest, "DepthTest"},
	{Empty::gl::ContextCapability::Dither, "Dither"},
	{Empty::gl::ContextCapability::FramebufferSRGB, "FramebufferSRGB"},
	{Empty::gl::ContextCapability::LineSmooth, "LineSmooth"},
	{Empty::gl::ContextCapability::Multisample, "Multisample"},
	{Empty::gl::ContextCapability::PolygonOffsetFill, "PolygonOffsetFill"},
	{Empty::gl::ContextCapability::PolygonOffsetLine, "PolygonOffsetLine"},
	{Empty::gl::ContextCapability::PolygonOffsetPoint, "PolygonOffsetPoint"},
	{Empty::gl::ContextCapability::PolygonSmooth, "PolygonSmooth"},
	{Empty::gl::ContextCapability::PrimitiveRestart, "PrimitiveRestart"},
	{Empty::gl::ContextCapability::PrimitiveRestartFixedIndex, "PrimitiveRestartFixedIndex"},
	{Empty::gl::ContextCapability::RasterizerDiscard, "RasterizerDiscard"},
	{Empty::gl::ContextCapability::SampleAlphaToCoverage, "SampleAlphaToCoverage"},
	{Empty::gl::ContextCapability::SampleAlphaToOne, "SampleAlphaToOne"},
	{Empty::gl::ContextCapability::SampleCoverage, "SampleCoverage"},
	{Empty::gl::ContextCapability::SampleShading, "SampleShading"},
	{Empty::gl::ContextCapability::SampleMask, "SampleMask"},
	{Empty::gl::ContextCapability::ScissorTest, "ScissorTest"},
	{Empty::gl::ContextCapability::StencilTest, "StencilTest"},
	{Empty::gl::ContextCapability::SeamlessCubemaps, "SeamlessCubemaps"},
	{Empty::gl::ContextCapability::ProgrammaticPointSize, "ProgrammaticPointSize"},
};
template <> const char* Empty::utils::name<Empty::gl::ContextCapability>(Empty::gl::ContextCapability e) { return ContextCapability_names.find(e)->second; }

static const std::unordered_map<Empty::gl::ContextStateVar, const char*> ContextStateVar_names = {
	{Empty::gl::ContextStateVar::ActiveTexture, "ActiveTexture"},
	{Empty::gl::ContextStateVar::AliasedLineWidthRange, "AliasedLineWidthRange"},
	{Empty::gl::ContextStateVar::ArrayBufferBinding, "ArrayBufferBinding"},
	{Empty::gl::ContextStateVar::Blend, "Blend"},
	{Empty::gl::ContextStateVar::BlendColor, "BlendColor"},
	{Empty::gl::ContextStateVar::BlendDstAlpha, "BlendDstAlpha"},
	{Empty::gl::ContextStateVar::BlendDstRGB, "BlendDstRGB"},
	{Empty::gl::ContextStateVar::BlendEquationRGB, "BlendEquationRGB"},
	{Empty::gl::ContextStateVar::BlendEquationAlpha, "BlendEquationAlpha"},
	{Empty::gl::ContextStateVar::BlendSrcAlpha, "BlendSrcAlpha"},
	{Empty::gl::ContextStateVar::BlendSrcRGB, "BlendSrcRGB"},
	{Empty::gl::ContextStateVar::ColorClearValue, "ColorClearValue"},
	{Empty::gl::ContextStateVar::ColorLogicOp, "ColorLogicOp"},
	{Empty::gl::ContextStateVar::ColorWriteMask, "ColorWriteMask"},
	{Empty::gl::ContextStateVar::CompressedTextureFormats, "CompressedTextureFormats"},
	{Empty::gl::ContextStateVar::MaxComputeShaderStorageBlocks, "MaxComputeShaderStorageBlocks"},
	{Empty::gl::ContextStateVar::MaxCombinedShaderStorageBlocks, "MaxCombinedShaderStorageBlocks"},
	{Empty::gl::ContextStateVar::MaxComputeUniformBlocks, "MaxComputeUniformBlocks"},
	{Empty::gl::ContextStateVar::MaxComputeTextureImageUnits, "MaxComputeTextureImageUnits"},
	{Empty::gl::ContextStateVar::MaxComputeUniformComponents, "MaxComputeUniformComponents"},
	{Empty::gl::ContextStateVar::MaxComputeAtomicCounters, "MaxComputeAtomicCounters"},
	{Empty::gl::ContextStateVar::MaxComputeAtomicCounterBuffers, "MaxComputeAtomicCounterBuffers"},
	{Empty::gl::ContextStateVar::MaxCombinedComputeUniformComponents, "MaxCombinedComputeUniformComponents"},
	{Empty::gl::ContextStateVar::MaxComputeWorkGroupInvocations, "MaxComputeWorkGroupInvocations"},
	{Empty::gl::ContextStateVar::MaxComputeWorkGroupCount, "MaxComputeWorkGroupCount"},
	{Empty::gl::ContextStateVar::MaxComputeWorkGroupSize, "MaxComputeWorkGroupSize"},
	{Empty::gl::ContextStateVar::DispatchIndirectBufferBinding, "DispatchIndirectBufferBinding"},
	{Empty::gl::ContextStateVar::MaxDebugGroupStackDepth, "MaxDebugGroupStackDepth"},
	{Empty::gl::ContextStateVar::DebugGroupStackDepth, "DebugGroupStackDepth"},
	{Empty::gl::ContextStateVar::ContextFlags, "ContextFlags"},
	{Empty::gl::ContextStateVar::CullFace, "CullFace"},
	{Empty::gl::ContextStateVar::CullFaceMode, "CullFaceMode"},
	{Empty::gl::ContextStateVar::CurrentProgram, "CurrentProgram"},
	{Empty::gl::ContextStateVar::DepthClearValue, "DepthClearValue"},
	{Empty::gl::ContextStateVar::DepthFunc, "DepthFunc"},
	{Empty::gl::ContextStateVar::DepthRange, "DepthRange"},
	{Empty::gl::ContextStateVar::DepthTest, "DepthTest"},
	{Empty::gl::ContextStateVar::DepthWriteMask, "DepthWriteMask"},
	{Empty::gl::ContextStateVar::Dither, "Dither"},
	{Empty::gl::ContextStateVar::DoubleBuffer, "DoubleBuffer"},
	{Empty::gl::ContextStateVar::DrawBuffer, "DrawBuffer"},
	{Empty::gl::ContextStateVar::DrawFramebufferBinding, "DrawFramebufferBinding"},
	{Empty::gl::ContextStateVar::ReadFramebufferBinding, "ReadFramebufferBinding"},
	{Empty::gl::ContextStateVar::ElementArrayBufferBinding, "ElementArrayBufferBinding"},
	{Empty::gl::ContextStateVar::FragmentShaderDerivativeHint, "FragmentShaderDerivativeHint"},
	{Empty::gl::ContextStateVar::ImplementationColorReadFormat, "ImplementationColorReadFormat"},
	{Empty::gl::ContextStateVar::ImplementationColorReadType, "ImplementationColorReadType"},
	{Empty::gl::ContextStateVar::LineSmooth, "LineSmooth"},
	{Empty::gl::ContextStateVar::LineSmoothHint, "LineSmoothHint"},
	{Empty::gl::ContextStateVar::LineWidth, "LineWidth"},
	{Empty::gl::ContextStateVar::LayerProvokingVertex, "LayerProvokingVertex"},
	{Empty::gl::ContextStateVar::LogicOpMode, "LogicOpMode"},
	{Empty::gl::ContextStateVar::MajorVersion, "MajorVersion"},
	{Empty::gl::ContextStateVar::Max3DTextureSize, "Max3DTextureSize"},
	{Empty::gl::ContextStateVar::MaxArrayTextureLayers, "MaxArrayTextureLayers"},
	{Empty::gl::ContextStateVar::MaxClipDistances, "MaxClipDistances"},
	{Empty::gl::ContextStateVar::MaxColorTextureSamples, "MaxColorTextureSamples"},
	{Empty::gl::ContextStateVar::MaxCombinedAtomicCounters, "MaxCombinedAtomicCounters"},
	{Empty::gl::ContextStateVar::MaxCombinedFragmentUniformComponents, "MaxCombinedFragmentUniformComponents"},
	{Empty::gl::ContextStateVar::MaxCombinedGeometryUniformComponents, "MaxCombinedGeometryUniformComponents"},
	{Empty::gl::ContextStateVar::MaxCombinedTextureImageUnits, "MaxCombinedTextureImageUnits"},
	{Empty::gl::ContextStateVar::MaxCombinedUniformBlocks, "MaxCombinedUniformBlocks"},
	{Empty::gl::ContextStateVar::MaxCombinedVertexUniformComponents, "MaxCombinedVertexUniformComponents"},
	{Empty::gl::ContextStateVar::MaxCubemapTextureSize, "MaxCubemapTextureSize"},
	{Empty::gl::ContextStateVar::MaxDepthTextureSamples, "MaxDepthTextureSamples"},
	{Empty::gl::ContextStateVar::MaxDrawBuffers, "MaxDrawBuffers"},
	{Empty::gl::ContextStateVar::MaxDualSourceDrawBuffers, "MaxDualSourceDrawBuffers"},
	{Empty::gl::ContextStateVar::MaxElementsIndices, "MaxElementsIndices"},
	{Empty::gl::ContextStateVar::MaxElementsVertices, "MaxElementsVertices"},
	{Empty::gl::ContextStateVar::MaxFragmentAtomicCounters, "MaxFragmentAtomicCounters"},
	{Empty::gl::ContextStateVar::MaxFragmentShaderStorageBlocks, "MaxFragmentShaderStorageBlocks"},
	{Empty::gl::ContextStateVar::MaxFragmentInputComponents, "MaxFragmentInputComponents"},
	{Empty::gl::ContextStateVar::MaxFragmentUniformComponents, "MaxFragmentUniformComponents"},
	{Empty::gl::ContextStateVar::MaxFragmentUniformVectors, "MaxFragmentUniformVectors"},
	{Empty::gl::ContextStateVar::MaxFragmentUniformBlocks, "MaxFragmentUniformBlocks"},
	{Empty::gl::ContextStateVar::MaxFramebufferWidth, "MaxFramebufferWidth"},
	{Empty::gl::ContextStateVar::MaxFramebufferHeight, "MaxFramebufferHeight"},
	{Empty::gl::ContextStateVar::MaxFramebufferLayers, "MaxFramebufferLayers"},
	{Empty::gl::ContextStateVar::MaxFramebufferSamples, "MaxFramebufferSamples"},
	{Empty::gl::ContextStateVar::MaxGeometryAtomicCounters, "MaxGeometryAtomicCounters"},
	{Empty::gl::ContextStateVar::MaxGeometryShaderStorageBlocks, "MaxGeometryShaderStorageBlocks"},
	{Empty::gl::ContextStateVar::MaxGeometryInputComponents, "MaxGeometryInputComponents"},
	{Empty::gl::ContextStateVar::MaxGeometryOutputComponents, "MaxGeometryOutputComponents"},
	{Empty::gl::ContextStateVar::MaxGeometryTextureImageUnits, "MaxGeometryTextureImageUnits"},
	{Empty::gl::ContextStateVar::MaxGeometryUniformBlocks, "MaxGeometryUniformBlocks"},
	{Empty::gl::ContextStateVar::MaxGeometryUniformComponents, "MaxGeometryUniformComponents"},
	{Empty::gl::ContextStateVar::MaxIntegerSamples, "MaxIntegerSamples"},
	{Empty::gl::ContextStateVar::MinMapBufferAlignment, "MinMapBufferAlignment"},
	{Empty::gl::ContextStateVar::MaxLabelLength, "MaxLabelLength"},
	{Empty::gl::ContextStateVar::MaxProgramTexelOffset, "MaxProgramTexelOffset"},
	{Empty::gl::ContextStateVar::MinProgramTexelOffset, "MinProgramTexelOffset"},
	{Empty::gl::ContextStateVar::MaxRectangleTextureSize, "MaxRectangleTextureSize"},
	{Empty::gl::ContextStateVar::MaxRenderbufferSize, "MaxRenderbufferSize"},
	{Empty::gl::ContextStateVar::MaxSampleMaskWords, "MaxSampleMaskWords"},
	{Empty::gl::ContextStateVar::MaxServerWaitTimeout, "MaxServerWaitTimeout"},
	{Empty::gl::ContextStateVar::MaxShaderStorageBufferBindings, "MaxShaderStorageBufferBindings"},
	{Empty::gl::ContextStateVar::MaxTessControlAtomicCounters, "MaxTessControlAtomicCounters"},
	{Empty::gl::ContextStateVar::MaxTessEvaluationAtomicCounters, "MaxTessEvaluationAtomicCounters"},
	{Empty::gl::ContextStateVar::MaxTessControlShaderStorageBlocks, "MaxTessControlShaderStorageBlocks"},
	{Empty::gl::ContextStateVar::MaxTessEvaluationShaderStorageBlocks, "MaxTessEvaluationShaderStorageBlocks"},
	{Empty::gl::ContextStateVar::MaxTextureBufferSize, "MaxTextureBufferSize"},
	{Empty::gl::ContextStateVar::MaxTextureImageUnits, "MaxTextureImageUnits"},
	{Empty::gl::ContextStateVar::MaxTextureLODBias, "MaxTextureLODBias"},
	{Empty::gl::ContextStateVar::MaxTextureSize, "MaxTextureSize"},
	{Empty::gl::ContextStateVar::MaxUniformBufferBindings, "MaxUniformBufferBindings"},
	{Empty::gl::ContextStateVar::MaxUniformBlockSize, "MaxUniformBlockSize"},
	{Empty::gl::ContextStateVar::MaxUniformLocations, "MaxUniformLocations"},
	{Empty::gl::ContextStateVar::MaxVaryingComponents, "MaxVaryingComponents"},
	{Empty::gl::ContextStateVar::MaxVaryingVectors, "MaxVaryingVectors"},
	{Empty::gl::ContextStateVar::MaxVaryingFloats, "MaxVaryingFloats"},
	{Empty::gl::ContextStateVar::MaxVertexAtomicCounters, "MaxVertexAtomicCounters"},
	{Empty::gl::ContextStateVar::MaxVertexAttribs, "MaxVertexAttribs"},
	{Empty::gl::ContextStateVar::MaxVertexShaderStorageBlocks, "MaxVertexShaderStorageBlocks"},
	{Empty::gl::ContextStateVar::MaxVertexTextureImageUnits, "MaxVertexTextureImageUnits"},
	{Empty::gl::ContextStateVar::MaxVertexUniformComponents, "MaxVertexUniformComponents"},
	{Empty::gl::ContextStateVar::MaxVertexUniformVectors, "MaxVertexUniformVectors"},
	{Empty::gl::ContextStateVar::MaxVertexOutputComponents, "MaxVertexOutputComponents"},
	{Empty::gl::ContextStateVar::MaxVertexUniformBlocks, "MaxVertexUniformBlocks"},
	{Empty::gl::ContextStateVar::MaxViewportDims, "MaxViewportDims"},
	{Empty::gl::ContextStateVar::MaxViewports, "MaxViewports"},
	{Empty::gl::ContextStateVar::MinorVersion, "MinorVersion"},
	{Empty::gl::ContextStateVar::NumCompressedTextureFormats, "NumCompressedTextureFormats"},
	{Empty::gl::ContextStateVar::NumExtensions, "NumExtensions"},
	{Empty::gl::ContextStateVar::NumProgramBinaryFormats, "NumProgramBinaryFormats"},
	{Empty::gl::ContextStateVar::NumShaderBinaryFormats, "NumShaderBinaryFormats"},
	{Empty::gl::ContextStateVar::PackAlignment, "PackAlignment"},
	{Empty::gl::ContextStateVar::PackImageHeight, "PackImageHeight"},
	{Empty::gl::ContextStateVar::PackLSBFirst, "PackLSBFirst"},
	{Empty::gl::ContextStateVar::PackRowLength, "PackRowLength"},
	{Empty::gl::ContextStateVar::PackSkipImages, "PackSkipImages"},
	{Empty::gl::ContextStateVar::PackSkipPixels, "PackSkipPixels"},
	{Empty::gl::ContextStateVar::PackSkipRows, "PackSkipRows"},
	{Empty::gl::ContextStateVar::PackSwapBytes, "PackSwapBytes"},
	{Empty::gl::ContextStateVar::PixelPackBufferBinding, "PixelPackBufferBinding"},
	{Empty::gl::ContextStateVar::PixelUnpackBufferBinding, "PixelUnpackBufferBinding"},
	{Empty::gl::ContextStateVar::PointFadeThresholdSize, "PointFadeThresholdSize"},
	{Empty::gl::ContextStateVar::PrimitiveRestartIndex, "PrimitiveRestartIndex"},
	{Empty::gl::ContextStateVar::ProgramBinaryFormats, "ProgramBinaryFormats"},
	{Empty::gl::ContextStateVar::ProgramPipelineBinding, "ProgramPipelineBinding"},
	{Empty::gl::ContextStateVar::ProgramPointSize, "ProgramPointSize"},
	{Empty::gl::ContextStateVar::ProvokingVertex, "ProvokingVertex"},
	{Empty::gl::ContextStateVar::PointSize, "PointSize"},
	{Empty::gl::ContextStateVar::PointSizeGranularity, "PointSizeGranularity"},
	{Empty::gl::ContextStateVar::PointSizeRange, "PointSizeRange"},
	{Empty::gl::ContextStateVar::PolygonOffsetFactor, "PolygonOffsetFactor"},
	{Empty::gl::ContextStateVar::PolygonOffsetUnits, "PolygonOffsetUnits"},
	{Empty::gl::ContextStateVar::PolygonOffsetFill, "PolygonOffsetFill"},
	{Empty::gl::ContextStateVar::PolygonOffsetLine, "PolygonOffsetLine"},
	{Empty::gl::ContextStateVar::PolygonOffsetPoint, "PolygonOffsetPoint"},
	{Empty::gl::ContextStateVar::PolygonSmooth, "PolygonSmooth"},
	{Empty::gl::ContextStateVar::PolygonSmoothHint, "PolygonSmoothHint"},
	{Empty::gl::ContextStateVar::ReadBuffer, "ReadBuffer"},
	{Empty::gl::ContextStateVar::RenderbufferBinding, "RenderbufferBinding"},
	{Empty::gl::ContextStateVar::SampleBuffers, "SampleBuffers"},
	{Empty::gl::ContextStateVar::SampleCoverageValue, "SampleCoverageValue"},
	{Empty::gl::ContextStateVar::SampleCoverageInvert, "SampleCoverageInvert"},
	{Empty::gl::ContextStateVar::SamplerBinding, "SamplerBinding"},
	{Empty::gl::ContextStateVar::Samples, "Samples"},
	{Empty::gl::ContextStateVar::ScissorBox, "ScissorBox"},
	{Empty::gl::ContextStateVar::ScissorTest, "ScissorTest"},
	{Empty::gl::ContextStateVar::ShaderCompiler, "ShaderCompiler"},
	{Empty::gl::ContextStateVar::ShaderStorageBufferBinding, "ShaderStorageBufferBinding"},
	{Empty::gl::ContextStateVar::ShaderStorageBufferOffsetAlignment, "ShaderStorageBufferOffsetAlignment"},
	{Empty::gl::ContextStateVar::ShaderStorageBufferStart, "ShaderStorageBufferStart"},
	{Empty::gl::ContextStateVar::ShaderStorageBufferSize, "ShaderStorageBufferSize"},
	{Empty::gl::ContextStateVar::SmoothLineWidthRange, "SmoothLineWidthRange"},
	{Empty::gl::ContextStateVar::SmoothLineWidthGranularity, "SmoothLineWidthGranularity"},
	{Empty::gl::ContextStateVar::StencilBackFail, "StencilBackFail"},
	{Empty::gl::ContextStateVar::StencilBackFunc, "StencilBackFunc"},
	{Empty::gl::ContextStateVar::StencilBackPassDepthFail, "StencilBackPassDepthFail"},
	{Empty::gl::ContextStateVar::StencilBackPassDepthPass, "StencilBackPassDepthPass"},
	{Empty::gl::ContextStateVar::StencilBackRef, "StencilBackRef"},
	{Empty::gl::ContextStateVar::StencilBackValueMask, "StencilBackValueMask"},
	{Empty::gl::ContextStateVar::StencilBackWriteMask, "StencilBackWriteMask"},
	{Empty::gl::ContextStateVar::StencilClearValue, "StencilClearValue"},
	{Empty::gl::ContextStateVar::StencilFail, "StencilFail"},
	{Empty::gl::ContextStateVar::StencilFunc, "StencilFunc"},
	{Empty::gl::ContextStateVar::StencilPassDepthFail, "StencilPassDepthFail"},
	{Empty::gl::ContextStateVar::StencilPassDepthPass, "StencilPassDepthPass"},
	{Empty::gl::ContextStateVar::StencilRef, "StencilRef"},
	{Empty::gl::ContextStateVar::StencilTest, "StencilTest"},
	{Empty::gl::ContextStateVar::StencilValueMask, "StencilValueMask"},
	{Empty::gl::ContextStateVar::StencilWriteMask, "StencilWriteMask"},
	{Empty::gl::ContextStateVar::Stereo, "Stereo"},
	{Empty::gl::ContextStateVar::SubpixelBits, "SubpixelBits"},
	{Empty::gl::ContextStateVar::TextureBinding1D, "TextureBinding1D"},
	{Empty::gl::ContextStateVar::TextureBinding1DArray, "TextureBinding1DArray"},
	{Empty::gl::ContextStateVar::TextureBinding2D, "TextureBinding2D"},
	{Empty::gl::ContextStateVar::TextureBinding2DArray, "TextureBinding2DArray"},
	{Empty::gl::ContextStateVar::TextureBinding2DMultisample, "TextureBinding2DMultisample"},
	{Empty::gl::ContextStateVar::TextureBinding2DMultisampleArray, "TextureBinding2DMultisampleArray"},
	{Empty::gl::ContextStateVar::TextureBinding3D, "TextureBinding3D"},
	{Empty::gl::ContextStateVar::TextureBindingBuffer, "TextureBindingBuffer"},
	{Empty::gl::ContextStateVar::TextureBindingCubemap, "TextureBindingCubemap"},
	{Empty::gl::ContextStateVar::TextureBindingRectangle, "TextureBindingRectangle"},
	{Empty::gl::ContextStateVar::TextureCompressionHint, "TextureCompressionHint"},
	{Empty::gl::ContextStateVar::TextureBufferOffsetAlignment, "TextureBufferOffsetAlignment"},
	{Empty::gl::ContextStateVar::Timestamp, "Timestamp"},
	{Empty::gl::ContextStateVar::TransformFeedbackBufferBinding, "TransformFeedbackBufferBinding"},
	{Empty::gl::ContextStateVar::TransformFeedbackBufferStart, "TransformFeedbackBufferStart"},
	{Empty::gl::ContextStateVar::TransformFeedbackBufferSize, "TransformFeedbackBufferSize"},
	{Empty::gl::ContextStateVar::UniformBufferBinding, "UniformBufferBinding"},
	{Empty::gl::ContextStateVar::UniformBufferOffsetAlignment, "UniformBufferOffsetAlignment"},
	{Empty::gl::ContextStateVar::UniformBufferSize, "UniformBufferSize"},
	{Empty::gl::ContextStateVar::UniformBufferStart, "UniformBufferStart"},
	{Empty::gl::ContextStateVar::UnpackAlignment, "UnpackAlignment"},
	{Empty::gl::ContextStateVar::UnpackImageHeight, "UnpackImageHeight"},
	{Empty::gl::ContextStateVar::UnpackLSBFirst, "UnpackLSBFirst"},
	{Empty::gl::ContextStateVar::UnpackRowLength, "UnpackRowLength"},
	{Empty::gl::ContextStateVar::UnpackSkipImages, "UnpackSkipImages"},
	{Empty::gl::ContextStateVar::UnpackSkipPixels, "UnpackSkipPixels"},
	{Empty::gl::ContextStateVar::UnpackSkipRows, "UnpackSkipRows"},
	{Empty::gl::ContextStateVar::UnpackSwapBytes, "UnpackSwapBytes"},
	{Empty::gl::ContextStateVar::VertexArrayBinding, "VertexArrayBinding"},
	{Empty::gl::ContextStateVar::VertexBindingDivisor, "VertexBindingDivisor"},
	{Empty::gl::ContextStateVar::VertexBindingOffset, "VertexBindingOffset"},
	{Empty::gl::ContextStateVar::VertexBindingStride, "VertexBindingStride"},
	{Empty::gl::ContextStateVar::VertexBindingBuffer, "VertexBindingBuffer"},
	{Empty::gl::ContextStateVar::MaxVertexAttribRelativeOffset, "MaxVertexAttribRelativeOffset"},
	{Empty::gl::ContextStateVar::MaxVertexAttribBindings, "MaxVertexAttribBindings"},
	{Empty::gl::ContextStateVar::Viewport, "Viewport"},
	{Empty::gl::ContextStateVar::ViewportBoundsRange, "ViewportBoundsRange"},
	{Empty::gl::ContextStateVar::ViewportIndexProvokingVertex, "ViewportIndexProvokingVertex"},
	{Empty::gl::ContextStateVar::ViewportSubpixelBits, "ViewportSubpixelBits"},
	{Empty::gl::ContextStateVar::MaxElementIndex, "MaxElementIndex"},
};
template <> const char* Empty::utils::name<Empty::gl::ContextStateVar>(Empty::gl::ContextStateVar e) { return ContextStateVar_names.find(e)->second; }

static const std::unordered_map<Empty::gl::DataFormat, const char*> DataFormat_names = {
	{Empty::gl::DataFormat::Red, "Red"},
	{Empty::gl::DataFormat::RG, "RG"},
	{Empty::gl::DataFormat::RGB, "RGB"},
	{Empty::gl::DataFormat::BGR, "BGR"},
	{Empty::gl::DataFormat::RGBA, "RGBA"},
	{Empty::gl::DataFormat::BGRA, "BGRA"},
	{Empty::gl::DataFormat::RedInt, "RedInt"},
	{Empty::gl::DataFormat::RGInt, "RGInt"},
	{Empty::gl::DataFormat::RGBInt, "RGBInt"},
	{Empty::gl::DataFormat::BGRInt, "BGRInt"},
	{Empty::gl::DataFormat::RGBAInt, "RGBAInt"},
	{Empty::gl::DataFormat::BGRAInt, "BGRAInt"},
	{Empty::gl::DataFormat::Depth, "Depth"},
	{Empty::gl::DataFormat::Stencil, "Stencil"},
	{Empty::gl::DataFormat::DepthStencil, "DepthStencil"},
};
template <> const char* Empty::utils::name<Empty::gl::DataFormat>(Empty::gl::DataFormat e) { return DataFormat_names.find(e)->second; }

static const std::unordered_map<Empty::gl::DataType, const char*> DataType_names = {
	{Empty::gl::DataType::UByte, "UByte"},
	{Empty::gl::DataType::Byte, "Byte"},
	{Empty::gl::DataType::UShort, "UShort"},
	{Empty::gl::DataType::Short, "Short"},
	{Empty::gl::DataType::UInt, "UInt"},
	{Empty::gl::DataType::Int, "Int"},
	{Empty::gl::DataType::Half, "Half"},
	{Empty::gl::DataType::Float, "Float"},
	{Empty::gl::DataType::UByte332, "UByte332"},
	{Empty::gl::DataType::UByte332Rev, "UByte332Rev"},
	{Empty::gl::DataType::UShort565, "UShort565"},
	{Empty::gl::DataType::UShort565Rev, "UShort565Rev"},
	{Empty::gl::DataType::UShort4, "UShort4"},
	{Empty::gl::DataType::UShort4Rev, "UShort4Rev"},
	{Empty::gl::DataType::UShort5551, "UShort5551"},
	{Empty::gl::DataType::UShort5551Rev, "UShort5551Rev"},
	{Empty::gl::DataType::UInt8, "UInt8"},
	{Empty::gl::DataType::UInt8Rev, "UInt8Rev"},
	{Empty::gl::DataType::UIntAAA2, "UIntAAA2"},
	{Empty::gl::DataType::UIntAAA2Rev, "UIntAAA2Rev"},
};
template <> const char* Empty::utils::name<Empty::gl::DataType>(Empty::gl::DataType e) { return DataType_names.find(e)->second; }

static const std::unordered_map<Empty::gl::AccessPolicy, const char*> AccessPolicy_names = {
	{Empty::gl::AccessPolicy::Invalid, "Invalid"},
	{Empty::gl::AccessPolicy::ReadOnly, "ReadOnly"},
	{Empty::gl::AccessPolicy::WriteOnly, "WriteOnly"},
	{Empty::gl::AccessPolicy::ReadWrite, "ReadWrite"},
};
template <> const char* Empty::utils::name<Empty::gl::AccessPolicy>(Empty::gl::AccessPolicy e) { return AccessPolicy_names.find(e)->second; }

static const std::unordered_map<Empty::gl::PrimitiveType, const char*> PrimitiveType_names = {
	{Empty::gl::PrimitiveType::Points, "Points"},
	{Empty::gl::PrimitiveType::LineStrip, "LineStrip"},
	{Empty::gl::PrimitiveType::LineLoop, "LineLoop"},
	{Empty::gl::PrimitiveType::Lines, "Lines"},
	{Empty::gl::PrimitiveType::LineStripAdjacency, "LineStripAdjacency"},
	{Empty::gl::PrimitiveType::LinesAdjacency, "LinesAdjacency"},
	{Empty::gl::PrimitiveType::TriangleStrip, "TriangleStrip"},
	{Empty::gl::PrimitiveType::TriangleFan, "TriangleFan"},
	{Empty::gl::PrimitiveType::Triangles, "Triangles"},
	{Empty::gl::PrimitiveType::TriangleStripAdjacency, "TriangleStripAdjacency"},
	{Empty::gl::PrimitiveType::TrianglesAdjacency, "TrianglesAdjacency"},
	{Empty::gl::PrimitiveType::Patches, "Patches"},
};
template <> const char* Empty::utils::name<Empty::gl::PrimitiveType>(Empty::gl::PrimitiveType e) { return PrimitiveType_names.find(e)->second; }

static const std::unordered_map<Empty::gl::ElementType, const char*> ElementType_names = {
	{Empty::gl::ElementType::Byte, "Byte"},
	{Empty::gl::ElementType::Short, "Short"},
	{Empty::gl::ElementType::Int, "Int"},
};
template <> const char* Empty::utils::name<Empty::gl::ElementType>(Empty::gl::ElementType e) { return ElementType_names.find(e)->second; }

static const std::unordered_map<Empty::gl::MemoryBarrierType, const char*> MemoryBarrierType_names = {
	{Empty::gl::MemoryBarrierType::VertexAttribArray, "VertexAttribArray"},
	{Empty::gl::MemoryBarrierType::ElementArray, "ElementArray"},
	{Empty::gl::MemoryBarrierType::Uniform, "Uniform"},
	{Empty::gl::MemoryBarrierType::ShaderTextureFetch, "ShaderTextureFetch"},
	{Empty::gl::MemoryBarrierType::ShaderImageAccess, "ShaderImageAccess"},
	{Empty::gl::MemoryBarrierType::Command, "Command"},
	{Empty::gl::MemoryBarrierType::PixelBuffer, "PixelBuffer"},
	{Empty::gl::MemoryBarrierType::TextureUpdate, "TextureUpdate"},
	{Empty::gl::MemoryBarrierType::BufferUpdate, "BufferUpdate"},
	{Empty::gl::MemoryBarrierType::ClientMappedBuffer, "ClientMappedBuffer"},
	{Empty::gl::MemoryBarrierType::QueryBuffer, "QueryBuffer"},
	{Empty::gl::MemoryBarrierType::Framebuffer, "Framebuffer"},
	{Empty::gl::MemoryBarrierType::TransformFeedback, "TransformFeedback"},
	{Empty::gl::MemoryBarrierType::AtomicCounter, "AtomicCounter"},
	{Empty::gl::MemoryBarrierType::ShaderStorage, "ShaderStorage"},
	{Empty::gl::MemoryBarrierType::All, "All"},
};
template <> const char* Empty::utils::name<Empty::gl::MemoryBarrierType>(Empty::gl::MemoryBarrierType e) { return MemoryBarrierType_names.find(e)->second; }

static const std::unordered_map<Empty::gl::DebugMessageSource, const char*> DebugMessageSource_names = {
	{Empty::gl::DebugMessageSource::DontCare, "DontCare"},
	{Empty::gl::DebugMessageSource::API, "API"},
	{Empty::gl::DebugMessageSource::WindowSystem, "WindowSystem"},
	{Empty::gl::DebugMessageSource::ShaderCompiler, "ShaderCompiler"},
	{Empty::gl::DebugMessageSource::ThirdParty, "ThirdParty"},
	{Empty::gl::DebugMessageSource::Application, "Application"},
	{Empty::gl::DebugMessageSource::Other, "Other"},
};
template <> const char* Empty::utils::name<Empty::gl::DebugMessageSource>(Empty::gl::DebugMessageSource e) { return DebugMessageSource_names.find(e)->second; }

static const std::unordered_map<Empty::gl::DebugMessageType, const char*> DebugMessageType_names = {
	{Empty::gl::DebugMessageType::DontCare, "DontCare"},
	{Empty::gl::DebugMessageType::Error, "Error"},
	{Empty::gl::DebugMessageType::DeprecatedBehavior, "DeprecatedBehavior"},
	{Empty::gl::DebugMessageType::UndefinedBehavior, "UndefinedBehavior"},
	{Empty::gl::DebugMessageType::Portability, "Portability"},
	{Empty::gl::DebugMessageType::Performance, "Performance"},
	{Empty::gl::DebugMessageType::Marker, "Marker"},
	{Empty::gl::DebugMessageType::PushGroup, "PushGroup"},
	{Empty::gl::DebugMessageType::PopGroup, "PopGroup"},
	{Empty::gl::DebugMessageType::Other, "Other"},
};
template <> const char* Empty::utils::name<Empty::gl::DebugMessageType>(Empty::gl::DebugMessageType e) { return DebugMessageType_names.find(e)->second; }

static const std::unordered_map<Empty::gl::DebugMessageSeverity, const char*> DebugMessageSeverity_names = {
	{Empty::gl::DebugMessageSeverity::DontCare, "DontCare"},
	{Empty::gl::DebugMessageSeverity::Notification, "Notification"},
	{Empty::gl::DebugMessageSeverity::Low, "Low"},
	{Empty::gl::DebugMessageSeverity::Medium, "Medium"},
	{Empty::gl::DebugMessageSeverity::High, "High"},
};
template <> const char* Empty::utils::name<Empty::gl::DebugMessageSeverity>(Empty::gl::DebugMessageSeverity e) { return DebugMessageSeverity_names.find(e)->second; }

static const std::unordered_map<Empty::gl::VertexAttribType, const char*> VertexAttribType_names = {
	{Empty::gl::VertexAttribType::UByte, "UByte"},
	{Empty::gl::VertexAttribType::Byte, "Byte"},
	{Empty::gl::VertexAttribType::UShort, "UShort"},
	{Empty::gl::VertexAttribType::Short, "Short"},
	{Empty::gl::VertexAttribType::UInt, "UInt"},
	{Empty::gl::VertexAttribType::Int, "Int"},
	{Empty::gl::VertexAttribType::Half, "Half"},
	{Empty::gl::VertexAttribType::Float, "Float"},
	{Empty::gl::VertexAttribType::Double, "Double"},
	{Empty::gl::VertexAttribType::Fixed, "Fixed"},
	{Empty::gl::VertexAttribType::UIntAAA2Rev, "UIntAAA2Rev"},
	{Empty::gl::VertexAttribType::IntAAA2Rev, "IntAAA2Rev"},
	{Empty::gl::VertexAttribType::UIntBfBfAfRev, "UIntBfBfAfRev"},
};
template <> const char* Empty::utils::name<Empty::gl::VertexAttribType>(Empty::gl::VertexAttribType e) { return VertexAttribType_names.find(e)->second; }

static const std::unordered_map<Empty::gl::BufferTarget, const char*> BufferTarget_names = {
	{Empty::gl::BufferTarget::Dynamic, "Dynamic"},
	{Empty::gl::BufferTarget::Array, "Array"},
	{Empty::gl::BufferTarget::AtomicCounter, "AtomicCounter"},
	{Empty::gl::BufferTarget::CopyRead, "CopyRead"},
	{Empty::gl::BufferTarget::CopyWrite, "CopyWrite"},
	{Empty::gl::BufferTarget::DispatchIndirect, "DispatchIndirect"},
	{Empty::gl::BufferTarget::DrawIndirect, "DrawIndirect"},
	{Empty::gl::BufferTarget::ElementArray, "ElementArray"},
	{Empty::gl::BufferTarget::PixelPack, "PixelPack"},
	{Empty::gl::BufferTarget::PixelUnpack, "PixelUnpack"},
	{Empty::gl::BufferTarget::Query, "Query"},
	{Empty::gl::BufferTarget::ShaderStorage, "ShaderStorage"},
	{Empty::gl::BufferTarget::Texture, "Texture"},
	{Empty::gl::BufferTarget::TransformFeedback, "TransformFeedback"},
	{Empty::gl::BufferTarget::Uniform, "Uniform"},
};
template <> const char* Empty::utils::name<Empty::gl::BufferTarget>(Empty::gl::BufferTarget e) { return BufferTarget_names.find(e)->second; }

static const std::unordered_map<Empty::gl::IndexedBufferTarget, const char*> IndexedBufferTarget_names = {
	{Empty::gl::IndexedBufferTarget::AtomicCounter, "AtomicCounter"},
	{Empty::gl::IndexedBufferTarget::ShaderStorage, "ShaderStorage"},
	{Empty::gl::IndexedBufferTarget::TransformFeedback, "TransformFeedback"},
	{Empty::gl::IndexedBufferTarget::Uniform, "Uniform"},
};
template <> const char* Empty::utils::name<Empty::gl::IndexedBufferTarget>(Empty::gl::IndexedBufferTarget e) { return IndexedBufferTarget_names.find(e)->second; }

static const std::unordered_map<Empty::gl::BufferUsage, const char*> BufferUsage_names = {
	{Empty::gl::BufferUsage::StreamDraw, "StreamDraw"},
	{Empty::gl::BufferUsage::StreamRead, "StreamRead"},
	{Empty::gl::BufferUsage::StreamCopy, "StreamCopy"},
	{Empty::gl::BufferUsage::StaticDraw, "StaticDraw"},
	{Empty::gl::BufferUsage::StaticRead, "StaticRead"},
	{Empty::gl::BufferUsage::StaticCopy, "StaticCopy"},
	{Empty::gl::BufferUsage::DynamicDraw, "DynamicDraw"},
	{Empty::gl::BufferUsage::DynamicRead, "DynamicRead"},
	{Empty::gl::BufferUsage::DynamicCopy, "DynamicCopy"},
};
template <> const char* Empty::utils::name<Empty::gl::BufferUsage>(Empty::gl::BufferUsage e) { return BufferUsage_names.find(e)->second; }

static const std::unordered_map<Empty::gl::BufferDataFormat, const char*> BufferDataFormat_names = {
	{Empty::gl::BufferDataFormat::Red8, "Red8"},
	{Empty::gl::BufferDataFormat::Red16, "Red16"},
	{Empty::gl::BufferDataFormat::Red16f, "Red16f"},
	{Empty::gl::BufferDataFormat::Red32f, "Red32f"},
	{Empty::gl::BufferDataFormat::Red8i, "Red8i"},
	{Empty::gl::BufferDataFormat::Red16i, "Red16i"},
	{Empty::gl::BufferDataFormat::Red32i, "Red32i"},
	{Empty::gl::BufferDataFormat::Red8ui, "Red8ui"},
	{Empty::gl::BufferDataFormat::Red16ui, "Red16ui"},
	{Empty::gl::BufferDataFormat::Red32ui, "Red32ui"},
	{Empty::gl::BufferDataFormat::RG8, "RG8"},
	{Empty::gl::BufferDataFormat::RG16, "RG16"},
	{Empty::gl::BufferDataFormat::RG16f, "RG16f"},
	{Empty::gl::BufferDataFormat::RG32f, "RG32f"},
	{Empty::gl::BufferDataFormat::RG8i, "RG8i"},
	{Empty::gl::BufferDataFormat::RG16i, "RG16i"},
	{Empty::gl::BufferDataFormat::RG32i, "RG32i"},
	{Empty::gl::BufferDataFormat::RG8ui, "RG8ui"},
	{Empty::gl::BufferDataFormat::RG16ui, "RG16ui"},
	{Empty::gl::BufferDataFormat::RG32ui, "RG32ui"},
	{Empty::gl::BufferDataFormat::RGB32f, "RGB32f"},
	{Empty::gl::BufferDataFormat::RGB32i, "RGB32i"},
	{Empty::gl::BufferDataFormat::RGB32ui, "RGB32ui"},
	{Empty::gl::BufferDataFormat::RGBA8, "RGBA8"},
	{Empty::gl::BufferDataFormat::RGBA16, "RGBA16"},
	{Empty::gl::BufferDataFormat::RGBA16f, "RGBA16f"},
	{Empty::gl::BufferDataFormat::RGBA32f, "RGBA32f"},
	{Empty::gl::BufferDataFormat::RGBA8i, "RGBA8i"},
	{Empty::gl::BufferDataFormat::RGBA16i, "RGBA16i"},
	{Empty::gl::BufferDataFormat::RGBA32i, "RGBA32i"},
	{Empty::gl::BufferDataFormat::RGBA8ui, "RGBA8ui"},
	{Empty::gl::BufferDataFormat::RGBA16ui, "RGBA16ui"},
	{Empty::gl::BufferDataFormat::RGBA32ui, "RGBA32ui"},
};
template <> const char* Empty::utils::name<Empty::gl::BufferDataFormat>(Empty::gl::BufferDataFormat e) { return BufferDataFormat_names.find(e)->second; }

static const std::unordered_map<Empty::gl::BufferParam, const char*> BufferParam_names = {
	{Empty::gl::BufferParam::Access, "Access"},
	{Empty::gl::BufferParam::AccessFlags, "AccessFlags"},
	{Empty::gl::BufferParam::ImmutableStorage, "ImmutableStorage"},
	{Empty::gl::BufferParam::Mapped, "Mapped"},
	{Empty::gl::BufferParam::MapLength, "MapLength"},
	{Empty::gl::BufferParam::MapOffset, "MapOffset"},
	{Empty::gl::BufferParam::Size, "Size"},
	{Empty::gl::BufferParam::StorageFlags, "StorageFlags"},
	{Empty::gl::BufferParam::Usage, "Usage"},
};
template <> const char* Empty::utils::name<Empty::gl::BufferParam>(Empty::gl::BufferParam e) { return BufferParam_names.find(e)->second; }

static const std::unordered_map<Empty::gl::TextureTarget, const char*> TextureTarget_names = {
	{Empty::gl::TextureTarget::Dynamic, "Dynamic"},
	{Empty::gl::TextureTarget::Texture1D, "Texture1D"},
	{Empty::gl::TextureTarget::Texture2D, "Texture2D"},
	{Empty::gl::TextureTarget::Texture3D, "Texture3D"},
	{Empty::gl::TextureTarget::Texture1DArray, "Texture1DArray"},
	{Empty::gl::TextureTarget::Texture2DArray, "Texture2DArray"},
	{Empty::gl::TextureTarget::TextureRectangle, "TextureRectangle"},
	{Empty::gl::TextureTarget::TextureCubemap, "TextureCubemap"},
	{Empty::gl::TextureTarget::TextureCubemapArray, "TextureCubemapArray"},
	{Empty::gl::TextureTarget::Texture2DMultisample, "Texture2DMultisample"},
	{Empty::gl::TextureTarget::Texture2DMultisampleArray, "Texture2DMultisampleArray"},
	{Empty::gl::TextureTarget::TextureBuffer, "TextureBuffer"},
	{Empty::gl::TextureTarget::Proxy1D, "Proxy1D"},
	{Empty::gl::TextureTarget::Proxy2D, "Proxy2D"},
	{Empty::gl::TextureTarget::Proxy3D, "Proxy3D"},
	{Empty::gl::TextureTarget::Proxy1DArray, "Proxy1DArray"},
	{Empty::gl::TextureTarget::Proxy2DArray, "Proxy2DArray"},
	{Empty::gl::TextureTarget::ProxyRectangle, "ProxyRectangle"},
	{Empty::gl::TextureTarget::ProxyCubemap, "ProxyCubemap"},
	{Empty::gl::TextureTarget::ProxyCubemapArray, "ProxyCubemapArray"},
	{Empty::gl::TextureTarget::Proxy2DMultisample, "Proxy2DMultisample"},
	{Empty::gl::TextureTarget::Proxy2DMultisampleArray, "Proxy2DMultisampleArray"},
};
template <> const char* Empty::utils::name<Empty::gl::TextureTarget>(Empty::gl::TextureTarget e) { return TextureTarget_names.find(e)->second; }

static const std::unordered_map<Empty::gl::TextureFormat, const char*> TextureFormat_names = {
	{Empty::gl::TextureFormat::Dynamic, "Dynamic"},
	{Empty::gl::TextureFormat::Red, "Red"},
	{Empty::gl::TextureFormat::RG, "RG"},
	{Empty::gl::TextureFormat::RGB, "RGB"},
	{Empty::gl::TextureFormat::RGBA, "RGBA"},
	{Empty::gl::TextureFormat::Depth, "Depth"},
	{Empty::gl::TextureFormat::DepthStencil, "DepthStencil"},
	{Empty::gl::TextureFormat::Red8, "Red8"},
	{Empty::gl::TextureFormat::Red8s, "Red8s"},
	{Empty::gl::TextureFormat::Red16, "Red16"},
	{Empty::gl::TextureFormat::Red16s, "Red16s"},
	{Empty::gl::TextureFormat::RG8, "RG8"},
	{Empty::gl::TextureFormat::RG8s, "RG8s"},
	{Empty::gl::TextureFormat::RG16, "RG16"},
	{Empty::gl::TextureFormat::RG16s, "RG16s"},
	{Empty::gl::TextureFormat::RGB332, "RGB332"},
	{Empty::gl::TextureFormat::RGB4, "RGB4"},
	{Empty::gl::TextureFormat::RGB5, "RGB5"},
	{Empty::gl::TextureFormat::RGB8, "RGB8"},
	{Empty::gl::TextureFormat::RGB8s, "RGB8s"},
	{Empty::gl::TextureFormat::RGB10, "RGB10"},
	{Empty::gl::TextureFormat::RGB12, "RGB12"},
	{Empty::gl::TextureFormat::RGB16s, "RGB16s"},
	{Empty::gl::TextureFormat::RGBA2, "RGBA2"},
	{Empty::gl::TextureFormat::RGBA4, "RGBA4"},
	{Empty::gl::TextureFormat::RGB5A1, "RGB5A1"},
	{Empty::gl::TextureFormat::RGBA8, "RGBA8"},
	{Empty::gl::TextureFormat::RGBA8s, "RGBA8s"},
	{Empty::gl::TextureFormat::RGB10A2, "RGB10A2"},
	{Empty::gl::TextureFormat::RGB10A2ui, "RGB10A2ui"},
	{Empty::gl::TextureFormat::RGBA12, "RGBA12"},
	{Empty::gl::TextureFormat::RGBA16, "RGBA16"},
	{Empty::gl::TextureFormat::SRGB8, "SRGB8"},
	{Empty::gl::TextureFormat::SRGBA8, "SRGBA8"},
	{Empty::gl::TextureFormat::Red16f, "Red16f"},
	{Empty::gl::TextureFormat::RG16f, "RG16f"},
	{Empty::gl::TextureFormat::RGB16f, "RGB16f"},
	{Empty::gl::TextureFormat::RGBA16f, "RGBA16f"},
	{Empty::gl::TextureFormat::Red32f, "Red32f"},
	{Empty::gl::TextureFormat::RG32f, "RG32f"},
	{Empty::gl::TextureFormat::RGB32f, "RGB32f"},
	{Empty::gl::TextureFormat::RGBA32f, "RGBA32f"},
	{Empty::gl::TextureFormat::R11G11B10f, "R11G11B10f"},
	{Empty::gl::TextureFormat::RGB9E5, "RGB9E5"},
	{Empty::gl::TextureFormat::Red8i, "Red8i"},
	{Empty::gl::TextureFormat::Red8ui, "Red8ui"},
	{Empty::gl::TextureFormat::Red16i, "Red16i"},
	{Empty::gl::TextureFormat::Red16ui, "Red16ui"},
	{Empty::gl::TextureFormat::Red32i, "Red32i"},
	{Empty::gl::TextureFormat::Red32ui, "Red32ui"},
	{Empty::gl::TextureFormat::RG8i, "RG8i"},
	{Empty::gl::TextureFormat::RG8ui, "RG8ui"},
	{Empty::gl::TextureFormat::RG16i, "RG16i"},
	{Empty::gl::TextureFormat::RG16ui, "RG16ui"},
	{Empty::gl::TextureFormat::RG32i, "RG32i"},
	{Empty::gl::TextureFormat::RG32ui, "RG32ui"},
	{Empty::gl::TextureFormat::RGB8i, "RGB8i"},
	{Empty::gl::TextureFormat::RGB8ui, "RGB8ui"},
	{Empty::gl::TextureFormat::RGB16i, "RGB16i"},
	{Empty::gl::TextureFormat::RGB16ui, "RGB16ui"},
	{Empty::gl::TextureFormat::RGB32i, "RGB32i"},
	{Empty::gl::TextureFormat::RGB32ui, "RGB32ui"},
	{Empty::gl::TextureFormat::RGBA8i, "RGBA8i"},
	{Empty::gl::TextureFormat::RGBA8ui, "RGBA8ui"},
	{Empty::gl::TextureFormat::RGBA16i, "RGBA16i"},
	{Empty::gl::TextureFormat::RGBA16ui, "RGBA16ui"},
	{Empty::gl::TextureFormat::RGBA32i, "RGBA32i"},
	{Empty::gl::TextureFormat::RGBA32ui, "RGBA32ui"},
	{Empty::gl::TextureFormat::RedComp, "RedComp"},
	{Empty::gl::TextureFormat::RGComp, "RGComp"},
	{Empty::gl::TextureFormat::RGBComp, "RGBComp"},
	{Empty::gl::TextureFormat::RGBAComp, "RGBAComp"},
	{Empty::gl::TextureFormat::SRGBComp, "SRGBComp"},
	{Empty::gl::TextureFormat::SRGBAComp, "SRGBAComp"},
};
template <> const char* Empty::utils::name<Empty::gl::TextureFormat>(Empty::gl::TextureFormat e) { return TextureFormat_names.find(e)->second; }

static const std::unordered_map<Empty::gl::CubemapFace, const char*> CubemapFace_names = {
	{Empty::gl::CubemapFace::PlusX, "PlusX"},
	{Empty::gl::CubemapFace::MinusX, "MinusX"},
	{Empty::gl::CubemapFace::PlusY, "PlusY"},
	{Empty::gl::CubemapFace::MinusY, "MinusY"},
	{Empty::gl::CubemapFace::PlusZ, "PlusZ"},
	{Empty::gl::CubemapFace::MinusZ, "MinusZ"},
};
template <> const char* Empty::utils::name<Empty::gl::CubemapFace>(Empty::gl::CubemapFace e) { return CubemapFace_names.find(e)->second; }

static const std::unordered_map<Empty::gl::TextureParam, const char*> TextureParam_names = {
	{Empty::gl::TextureParam::DepthStencilMode, "DepthStencilMode"},
	{Empty::gl::TextureParam::BaseLevel, "BaseLevel"},
	{Empty::gl::TextureParam::BorderColor, "BorderColor"},
	{Empty::gl::TextureParam::CompareFunc, "CompareFunc"},
	{Empty::gl::TextureParam::CompareMode, "CompareMode"},
	{Empty::gl::TextureParam::LODBias, "LODBias"},
	{Empty::gl::TextureParam::MinFilter, "MinFilter"},
	{Empty::gl::TextureParam::MagFilter, "MagFilter"},
	{Empty::gl::TextureParam::MinLOD, "MinLOD"},
	{Empty::gl::TextureParam::MaxLOD, "MaxLOD"},
	{Empty::gl::TextureParam::MaxLevel, "MaxLevel"},
	{Empty::gl::TextureParam::SwizzleR, "SwizzleR"},
	{Empty::gl::TextureParam::SwizzleG, "SwizzleG"},
	{Empty::gl::TextureParam::SwizzleB, "SwizzleB"},
	{Empty::gl::TextureParam::SwizzleA, "SwizzleA"},
	{Empty::gl::TextureParam::SwizzleRGBA, "SwizzleRGBA"},
	{Empty::gl::TextureParam::WrapS, "WrapS"},
	{Empty::gl::TextureParam::WrapT, "WrapT"},
	{Empty::gl::TextureParam::WrapR, "WrapR"},
	{Empty::gl::TextureParam::ViewImmutableLevels, "ViewImmutableLevels"},
	{Empty::gl::TextureParam::ViewMinLayer, "ViewMinLayer"},
	{Empty::gl::TextureParam::ViewNumLayers, "ViewNumLayers"},
	{Empty::gl::TextureParam::ViewMinLevel, "ViewMinLevel"},
	{Empty::gl::TextureParam::ViewNumLevels, "ViewNumLevels"},
	{Empty::gl::TextureParam::ImageFormatCompatibilityType, "ImageFormatCompatibilityType"},
	{Empty::gl::TextureParam::HasImmutableFormat, "HasImmutableFormat"},
};
template <> const char* Empty::utils::name<Empty::gl::TextureParam>(Empty::gl::TextureParam e) { return TextureParam_names.find(e)->second; }

static const std::unordered_map<Empty::gl::TextureParamValue, const char*> TextureParamValue_names = {
	{Empty::gl::TextureParamValue::Invalid, "Invalid"},
	{Empty::gl::TextureParamValue::DepthMode, "DepthMode"},
	{Empty::gl::TextureParamValue::StencilMode, "StencilMode"},
	{Empty::gl::TextureParamValue::FuncLEqual, "FuncLEqual"},
	{Empty::gl::TextureParamValue::FuncGEqual, "FuncGEqual"},
	{Empty::gl::TextureParamValue::FuncLess, "FuncLess"},
	{Empty::gl::TextureParamValue::FuncGreater, "FuncGreater"},
	{Empty::gl::TextureParamValue::FuncEqual, "FuncEqual"},
	{Empty::gl::TextureParamValue::FuncNotEqual, "FuncNotEqual"},
	{Empty::gl::TextureParamValue::FuncAlways, "FuncAlways"},
	{Empty::gl::TextureParamValue::FuncNever, "FuncNever"},
	{Empty::gl::TextureParamValue::CompareRefToTexture, "CompareRefToTexture"},
	{Empty::gl::TextureParamValue::NoCompare, "NoCompare"},
	{Empty::gl::TextureParamValue::FilterNearest, "FilterNearest"},
	{Empty::gl::TextureParamValue::FilterLinear, "FilterLinear"},
	{Empty::gl::TextureParamValue::FilterNearestMipmapNearest, "FilterNearestMipmapNearest"},
	{Empty::gl::TextureParamValue::FilterNearestMipmapLinear, "FilterNearestMipmapLinear"},
	{Empty::gl::TextureParamValue::FilterLinearMipmapNearest, "FilterLinearMipmapNearest"},
	{Empty::gl::TextureParamValue::FilterLinearMipmapLinear, "FilterLinearMipmapLinear"},
	{Empty::gl::TextureParamValue::SwizzleRed, "SwizzleRed"},
	{Empty::gl::TextureParamValue::SwizzleGreen, "SwizzleGreen"},
	{Empty::gl::TextureParamValue::SwizzleBlue, "SwizzleBlue"},
	{Empty::gl::TextureParamValue::SwizzleAlpha, "SwizzleAlpha"},
	{Empty::gl::TextureParamValue::SwizzleZero, "SwizzleZero"},
	{Empty::gl::TextureParamValue::SwizzleOne, "SwizzleOne"},
	{Empty::gl::TextureParamValue::ClampToEdge, "ClampToEdge"},
	{Empty::gl::TextureParamValue::ClampToBorder, "ClampToBorder"},
	{Empty::gl::TextureParamValue::MirrorRepeat, "MirrorRepeat"},
	{Empty::gl::TextureParamValue::Repeat, "Repeat"},
	{Empty::gl::TextureParamValue::MirrorClampToEdge, "MirrorClampToEdge"},
};
template <> const char* Empty::utils::name<Empty::gl::TextureParamValue>(Empty::gl::TextureParamValue e) { return TextureParamValue_names.find(e)->second; }

static const std::unordered_map<Empty::gl::TextureLevelParam, const char*> TextureLevelParam_names = {
	{Empty::gl::TextureLevelParam::Width, "Width"},
	{Empty::gl::TextureLevelParam::Height, "Height"},
	{Empty::gl::TextureLevelParam::Depth, "Depth"},
	{Empty::gl::TextureLevelParam::RedType, "RedType"},
	{Empty::gl::TextureLevelParam::GreenType, "GreenType"},
	{Empty::gl::TextureLevelParam::BlueType, "BlueType"},
	{Empty::gl::TextureLevelParam::AlphaType, "AlphaType"},
	{Empty::gl::TextureLevelParam::DepthType, "DepthType"},
	{Empty::gl::TextureLevelParam::RedSize, "RedSize"},
	{Empty::gl::TextureLevelParam::GreenSize, "GreenSize"},
	{Empty::gl::TextureLevelParam::BlueSize, "BlueSize"},
	{Empty::gl::TextureLevelParam::AlphaSize, "AlphaSize"},
	{Empty::gl::TextureLevelParam::DepthSize, "DepthSize"},
	{Empty::gl::TextureLevelParam::Compressed, "Compressed"},
	{Empty::gl::TextureLevelParam::CompressedSize, "CompressedSize"},
	{Empty::gl::TextureLevelParam::BufferDataStoreBinding, "BufferDataStoreBinding"},
	{Empty::gl::TextureLevelParam::BufferOffset, "BufferOffset"},
	{Empty::gl::TextureLevelParam::BufferSize, "BufferSize"},
};
template <> const char* Empty::utils::name<Empty::gl::TextureLevelParam>(Empty::gl::TextureLevelParam e) { return TextureLevelParam_names.find(e)->second; }

static const std::unordered_map<Empty::gl::TextureComponentType, const char*> TextureComponentType_names = {
	{Empty::gl::TextureComponentType::None, "None"},
	{Empty::gl::TextureComponentType::Norm, "Norm"},
	{Empty::gl::TextureComponentType::UNorm, "UNorm"},
	{Empty::gl::TextureComponentType::Float, "Float"},
	{Empty::gl::TextureComponentType::Int, "Int"},
	{Empty::gl::TextureComponentType::Uint, "Uint"},
};
template <> const char* Empty::utils::name<Empty::gl::TextureComponentType>(Empty::gl::TextureComponentType e) { return TextureComponentType_names.find(e)->second; }

static const std::unordered_map<Empty::gl::ShaderType, const char*> ShaderType_names = {
	{Empty::gl::ShaderType::Compute, "Compute"},
	{Empty::gl::ShaderType::Fragment, "Fragment"},
	{Empty::gl::ShaderType::Geometry, "Geometry"},
	{Empty::gl::ShaderType::TessControl, "TessControl"},
	{Empty::gl::ShaderType::TessEvaluation, "TessEvaluation"},
	{Empty::gl::ShaderType::Vertex, "Vertex"},
};
template <> const char* Empty::utils::name<Empty::gl::ShaderType>(Empty::gl::ShaderType e) { return ShaderType_names.find(e)->second; }

static const std::unordered_map<Empty::gl::ShaderParam, const char*> ShaderParam_names = {
	{Empty::gl::ShaderParam::Type, "Type"},
	{Empty::gl::ShaderParam::DeleteStatus, "DeleteStatus"},
	{Empty::gl::ShaderParam::CompileStatus, "CompileStatus"},
	{Empty::gl::ShaderParam::InfoLogLength, "InfoLogLength"},
	{Empty::gl::ShaderParam::SourceLength, "SourceLength"},
};
template <> const char* Empty::utils::name<Empty::gl::ShaderParam>(Empty::gl::ShaderParam e) { return ShaderParam_names.find(e)->second; }

static const std::unordered_map<Empty::gl::ProgramParam, const char*> ProgramParam_names = {
	{Empty::gl::ProgramParam::DeleteStatus, "DeleteStatus"},
	{Empty::gl::ProgramParam::LinkStatus, "LinkStatus"},
	{Empty::gl::ProgramParam::ValidateStatus, "ValidateStatus"},
	{Empty::gl::ProgramParam::InfoLogLength, "InfoLogLength"},
	{Empty::gl::ProgramParam::AttachedShaders, "AttachedShaders"},
	{Empty::gl::ProgramParam::ActiveAtomicCounterBuffers, "ActiveAtomicCounterBuffers"},
	{Empty::gl::ProgramParam::ActiveAttributes, "ActiveAttributes"},
	{Empty::gl::ProgramParam::ActiveAttributeMaxNameLength, "ActiveAttributeMaxNameLength"},
	{Empty::gl::ProgramParam::ActiveUniforms, "ActiveUniforms"},
	{Empty::gl::ProgramParam::ActiveUniformMaxNameLength, "ActiveUniformMaxNameLength"},
	{Empty::gl::ProgramParam::BinaryLength, "BinaryLength"},
	{Empty::gl::ProgramParam::ComputeWorkGroupSize, "ComputeWorkGroupSize"},
	{Empty::gl::ProgramParam::TransformFeedbackBufferMode, "TransformFeedbackBufferMode"},
	{Empty::gl::ProgramParam::TransformFeedbackVaryings, "TransformFeedbackVaryings"},
	{Empty::gl::ProgramParam::TransformFeedbackVaryingMaxNameLength, "TransformFeedbackVaryingMaxNameLength"},
	{Empty::gl::ProgramParam::GeometryVerticesOut, "GeometryVerticesOut"},
	{Empty::gl::ProgramParam::GeometryInputType, "GeometryInputType"},
	{Empty::gl::ProgramParam::GeometryOutputType, "GeometryOutputType"},
	{Empty::gl::ProgramParam::RetrievableBinaryHint, "RetrievableBinaryHint"},
	{Empty::gl::ProgramParam::Separable, "Separable"},
};
template <> const char* Empty::utils::name<Empty::gl::ProgramParam>(Empty::gl::ProgramParam e) { return ProgramParam_names.find(e)->second; }

static const std::unordered_map<Empty::gl::DrawBufferType, const char*> DrawBufferType_names = {
	{Empty::gl::DrawBufferType::Color, "Color"},
	{Empty::gl::DrawBufferType::Depth, "Depth"},
	{Empty::gl::DrawBufferType::Stencil, "Stencil"},
	{Empty::gl::DrawBufferType::DepthStencil, "DepthStencil"},
};
template <> const char* Empty::utils::name<Empty::gl::DrawBufferType>(Empty::gl::DrawBufferType e) { return DrawBufferType_names.find(e)->second; }

static const std::unordered_map<Empty::gl::FramebufferAttachment, const char*> FramebufferAttachment_names = {
	{Empty::gl::FramebufferAttachment::Color, "Color"},
	{Empty::gl::FramebufferAttachment::Depth, "Depth"},
	{Empty::gl::FramebufferAttachment::Stencil, "Stencil"},
	{Empty::gl::FramebufferAttachment::DepthStencil, "DepthStencil"},
};
template <> const char* Empty::utils::name<Empty::gl::FramebufferAttachment>(Empty::gl::FramebufferAttachment e) { return FramebufferAttachment_names.find(e)->second; }

static const std::unordered_map<Empty::gl::FramebufferTarget, const char*> FramebufferTarget_names = {
	{Empty::gl::FramebufferTarget::Draw, "Draw"},
	{Empty::gl::FramebufferTarget::Read, "Read"},
	{Empty::gl::FramebufferTarget::DrawRead, "DrawRead"},
};
template <> const char* Empty::utils::name<Empty::gl::FramebufferTarget>(Empty::gl::FramebufferTarget e) { return FramebufferTarget_names.find(e)->second; }

static const std::unordered_map<Empty::gl::FramebufferParam, const char*> FramebufferParam_names = {
	{Empty::gl::FramebufferParam::DefaultWidth, "DefaultWidth"},
	{Empty::gl::FramebufferParam::DefaultHeight, "DefaultHeight"},
	{Empty::gl::FramebufferParam::DefaultLayers, "DefaultLayers"},
	{Empty::gl::FramebufferParam::DefaultSamples, "DefaultSamples"},
	{Empty::gl::FramebufferParam::DefaultFixedSampleLocations, "DefaultFixedSampleLocations"},
};
template <> const char* Empty::utils::name<Empty::gl::FramebufferParam>(Empty::gl::FramebufferParam e) { return FramebufferParam_names.find(e)->second; }

static const std::unordered_map<Empty::gl::FramebufferStatus, const char*> FramebufferStatus_names = {
	{Empty::gl::FramebufferStatus::Error, "Error"},
	{Empty::gl::FramebufferStatus::Complete, "Complete"},
	{Empty::gl::FramebufferStatus::Undefined, "Undefined"},
	{Empty::gl::FramebufferStatus::IncompleteAttachment, "IncompleteAttachment"},
	{Empty::gl::FramebufferStatus::IncompleteMissingAttachment, "IncompleteMissingAttachment"},
	{Empty::gl::FramebufferStatus::IncompleteDrawBuffer, "IncompleteDrawBuffer"},
	{Empty::gl::FramebufferStatus::IncompleteReadBuffer, "IncompleteReadBuffer"},
	{Empty::gl::FramebufferStatus::Unsupported, "Unsupported"},
	{Empty::gl::FramebufferStatus::IncompleteMultisample, "IncompleteMultisample"},
	{Empty::gl::FramebufferStatus::IncompleteLayerTargets, "IncompleteLayerTargets"},
};
template <> const char* Empty::utils::name<Empty::gl::FramebufferStatus>(Empty::gl::FramebufferStatus e) { return FramebufferStatus_names.find(e)->second; }

static const std::unordered_map<Empty::gl::RenderbufferFormat, const char*> RenderbufferFormat_names = {
	{Empty::gl::RenderbufferFormat::Red, "Red"},
	{Empty::gl::RenderbufferFormat::RG, "RG"},
	{Empty::gl::RenderbufferFormat::RGB, "RGB"},
	{Empty::gl::RenderbufferFormat::RGBA, "RGBA"},
	{Empty::gl::RenderbufferFormat::Red8, "Red8"},
	{Empty::gl::RenderbufferFormat::Red8s, "Red8s"},
	{Empty::gl::RenderbufferFormat::Red16, "Red16"},
	{Empty::gl::RenderbufferFormat::Red16s, "Red16s"},
	{Empty::gl::RenderbufferFormat::RG8, "RG8"},
	{Empty::gl::RenderbufferFormat::RG8s, "RG8s"},
	{Empty::gl::RenderbufferFormat::RG16, "RG16"},
	{Empty::gl::RenderbufferFormat::RG16s, "RG16s"},
	{Empty::gl::RenderbufferFormat::RGB332, "RGB332"},
	{Empty::gl::RenderbufferFormat::RGB4, "RGB4"},
	{Empty::gl::RenderbufferFormat::RGB5, "RGB5"},
	{Empty::gl::RenderbufferFormat::RGB8, "RGB8"},
	{Empty::gl::RenderbufferFormat::RGB8s, "RGB8s"},
	{Empty::gl::RenderbufferFormat::RGB10, "RGB10"},
	{Empty::gl::RenderbufferFormat::RGB12, "RGB12"},
	{Empty::gl::RenderbufferFormat::RGB16s, "RGB16s"},
	{Empty::gl::RenderbufferFormat::RGBA2, "RGBA2"},
	{Empty::gl::RenderbufferFormat::RGBA4, "RGBA4"},
	{Empty::gl::RenderbufferFormat::RGB5A1, "RGB5A1"},
	{Empty::gl::RenderbufferFormat::RGBA8, "RGBA8"},
	{Empty::gl::RenderbufferFormat::RGBA8s, "RGBA8s"},
	{Empty::gl::RenderbufferFormat::RGB10A2, "RGB10A2"},
	{Empty::gl::RenderbufferFormat::RGB10A2ui, "RGB10A2ui"},
	{Empty::gl::RenderbufferFormat::RGBA12, "RGBA12"},
	{Empty::gl::RenderbufferFormat::RGBA16, "RGBA16"},
	{Empty::gl::RenderbufferFormat::SRGB8, "SRGB8"},
	{Empty::gl::RenderbufferFormat::SRGBA8, "SRGBA8"},
	{Empty::gl::RenderbufferFormat::Red16f, "Red16f"},
	{Empty::gl::RenderbufferFormat::RG16f, "RG16f"},
	{Empty::gl::RenderbufferFormat::RGB16f, "RGB16f"},
	{Empty::gl::RenderbufferFormat::RGBA16f, "RGBA16f"},
	{Empty::gl::RenderbufferFormat::Red32f, "Red32f"},
	{Empty::gl::RenderbufferFormat::RG32f, "RG32f"},
	{Empty::gl::RenderbufferFormat::RGB32f, "RGB32f"},
	{Empty::gl::RenderbufferFormat::RGBA32f, "RGBA32f"},
	{Empty::gl::RenderbufferFormat::R11G11B10f, "R11G11B10f"},
	{Empty::gl::RenderbufferFormat::Red8i, "Red8i"},
	{Empty::gl::RenderbufferFormat::Red8ui, "Red8ui"},
	{Empty::gl::RenderbufferFormat::Red16i, "Red16i"},
	{Empty::gl::RenderbufferFormat::Red16ui, "Red16ui"},
	{Empty::gl::RenderbufferFormat::Red32i, "Red32i"},
	{Empty::gl::RenderbufferFormat::Red32ui, "Red32ui"},
	{Empty::gl::RenderbufferFormat::RG8i, "RG8i"},
	{Empty::gl::RenderbufferFormat::RG8ui, "RG8ui"},
	{Empty::gl::RenderbufferFormat::RG16i, "RG16i"},
	{Empty::gl::RenderbufferFormat::RG16ui, "RG16ui"},
	{Empty::gl::RenderbufferFormat::RG32i, "RG32i"},
	{Empty::gl::RenderbufferFormat::RG32ui, "RG32ui"},
	{Empty::gl::RenderbufferFormat::RGB8i, "RGB8i"},
	{Empty::gl::RenderbufferFormat::RGB8ui, "RGB8ui"},
	{Empty::gl::RenderbufferFormat::RGB16i, "RGB16i"},
	{Empty::gl::RenderbufferFormat::RGB16ui, "RGB16ui"},
	{Empty::gl::RenderbufferFormat::RGB32i, "RGB32i"},
	{Empty::gl::RenderbufferFormat::RGB32ui, "RGB32ui"},
	{Empty::gl::RenderbufferFormat::RGBA8i, "RGBA8i"},
	{Empty::gl::RenderbufferFormat::RGBA8ui, "RGBA8ui"},
	{Empty::gl::RenderbufferFormat::RGBA16i, "RGBA16i"},
	{Empty::gl::RenderbufferFormat::RGBA16ui, "RGBA16ui"},
	{Empty::gl::RenderbufferFormat::RGBA32i, "RGBA32i"},
	{Empty::gl::RenderbufferFormat::RGBA32ui, "RGBA32ui"},
	{Empty::gl::RenderbufferFormat::Depth, "Depth"},
	{Empty::gl::RenderbufferFormat::Depth16, "Depth16"},
	{Empty::gl::RenderbufferFormat::Depth24, "Depth24"},
	{Empty::gl::RenderbufferFormat::Depth32, "Depth32"},
	{Empty::gl::RenderbufferFormat::Depth32f, "Depth32f"},
	{Empty::gl::RenderbufferFormat::Stencil, "Stencil"},
	{Empty::gl::RenderbufferFormat::Stencil1, "Stencil1"},
	{Empty::gl::RenderbufferFormat::Stencil4, "Stencil4"},
	{Empty::gl::RenderbufferFormat::Stencil8, "Stencil8"},
	{Empty::gl::RenderbufferFormat::Stencil16, "Stencil16"},
	{Empty::gl::RenderbufferFormat::DepthStencil, "DepthStencil"},
	{Empty::gl::RenderbufferFormat::Depth24Stencil8, "Depth24Stencil8"},
	{Empty::gl::RenderbufferFormat::Depth32fStencil8, "Depth32fStencil8"},
};
template <> const char* Empty::utils::name<Empty::gl::RenderbufferFormat>(Empty::gl::RenderbufferFormat e) { return RenderbufferFormat_names.find(e)->second; }

static const std::unordered_map<Empty::gl::RenderbufferParam, const char*> RenderbufferParam_names = {
	{Empty::gl::RenderbufferParam::Width, "Width"},
	{Empty::gl::RenderbufferParam::Height, "Height"},
	{Empty::gl::RenderbufferParam::InternalFormat, "InternalFormat"},
	{Empty::gl::RenderbufferParam::Samples, "Samples"},
	{Empty::gl::RenderbufferParam::RedSize, "RedSize"},
	{Empty::gl::RenderbufferParam::GreenSize, "GreenSize"},
	{Empty::gl::RenderbufferParam::BlueSize, "BlueSize"},
	{Empty::gl::RenderbufferParam::AlphaSize, "AlphaSize"},
	{Empty::gl::RenderbufferParam::DepthSize, "DepthSize"},
	{Empty::gl::RenderbufferParam::StencilSize, "StencilSize"},
};
template <> const char* Empty::utils::name<Empty::gl::RenderbufferParam>(Empty::gl::RenderbufferParam e) { return RenderbufferParam_names.find(e)->second; }

