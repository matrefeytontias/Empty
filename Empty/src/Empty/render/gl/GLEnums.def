#include "glad/glad.h"

namespace Empty::render::gl
{
	// ########################
	// # General enum structs #
	// ########################

	/**
	 * Context capabilities.
	 */
	enum struct ContextCapability : GLenum
	{
		Blend = GL_BLEND,
		ClipDistance = GL_CLIP_DISTANCE0,
		ColorLogicOp = GL_COLOR_LOGIC_OP,
		CullFace = GL_CULL_FACE,
		DebugOutput = GL_DEBUG_OUTPUT,
		DebugOutputSynchronous = GL_DEBUG_OUTPUT_SYNCHRONOUS,
		DepthClamp = GL_DEPTH_CLAMP,
		DepthTest = GL_DEPTH_TEST,
		Dither = GL_DITHER,
		FramebufferSRGB = GL_FRAMEBUFFER_SRGB,
		LineSmooth = GL_LINE_SMOOTH,
		Multisample = GL_MULTISAMPLE,
		PolygonOffsetFill = GL_POLYGON_OFFSET_FILL,
		PolygonOffsetLine = GL_POLYGON_OFFSET_LINE,
		PolygonOffsetPoint = GL_POLYGON_OFFSET_POINT,
		PolygonSmooth = GL_POLYGON_SMOOTH,
		PrimitiveRestart = GL_PRIMITIVE_RESTART,
		PrimitiveRestartFixedIndex = GL_PRIMITIVE_RESTART_FIXED_INDEX,
		RasterizerDiscard = GL_RASTERIZER_DISCARD,
		SampleAlphaToCoverage = GL_SAMPLE_ALPHA_TO_COVERAGE,
		SampleAlphaToOne = GL_SAMPLE_ALPHA_TO_ONE,
		SampleCoverage = GL_SAMPLE_COVERAGE,
		SampleShading = GL_SAMPLE_SHADING,
		SampleMask = GL_SAMPLE_MASK,
		ScissorTest = GL_SCISSOR_TEST,
		StencilTest = GL_STENCIL_TEST,
		SeamlessCubemaps = GL_TEXTURE_CUBE_MAP_SEAMLESS,
		ProgrammaticPointSize = GL_PROGRAM_POINT_SIZE,
	};

	/**
	 * Context state variable names.
	 */
	enum struct ContextStateVar : GLenum
	{
		ActiveTexture = GL_ACTIVE_TEXTURE,
		AliasedLineWidthRange = GL_ALIASED_LINE_WIDTH_RANGE,
		ArrayBufferBinding = GL_ARRAY_BUFFER_BINDING,
		Blend = GL_BLEND,
		BlendColor = GL_BLEND_COLOR,
		BlendDstAlpha = GL_BLEND_DST_ALPHA,
		BlendDstRGB = GL_BLEND_DST_RGB,
		BlendEquationRGB = GL_BLEND_EQUATION_RGB,
		BlendEquationAlpha = GL_BLEND_EQUATION_ALPHA,
		BlendSrcAlpha = GL_BLEND_SRC_ALPHA,
		BlendSrcRGB = GL_BLEND_SRC_RGB,
		ColorClearValue = GL_COLOR_CLEAR_VALUE,
		ColorLogicOp = GL_COLOR_LOGIC_OP,
		ColorWriteMask = GL_COLOR_WRITEMASK,
		CompressedTextureFormats = GL_COMPRESSED_TEXTURE_FORMATS,
		MaxComputeShaderStorageBlocks = GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS,
		MaxCombinedShaderStorageBlocks = GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS,
		MaxComputeUniformBlocks = GL_MAX_COMPUTE_UNIFORM_BLOCKS,
		MaxComputeTextureImageUnits = GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS,
		MaxComputeUniformComponents = GL_MAX_COMPUTE_UNIFORM_COMPONENTS,
		MaxComputeAtomicCounters = GL_MAX_COMPUTE_ATOMIC_COUNTERS,
		MaxComputeAtomicCounterBuffers = GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS,
		MaxCombinedComputeUniformComponents = GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS,
		MaxComputeWorkGroupInvocations = GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS,
		MaxComputeWorkGroupCount = GL_MAX_COMPUTE_WORK_GROUP_COUNT,
		MaxComputeWorkGroupSize = GL_MAX_COMPUTE_WORK_GROUP_SIZE,
		DispatchIndirectBufferBinding = GL_DISPATCH_INDIRECT_BUFFER_BINDING,
		MaxDebugGroupStackDepth = GL_MAX_DEBUG_GROUP_STACK_DEPTH,
		DebugGroupStackDepth = GL_DEBUG_GROUP_STACK_DEPTH,
		ContextFlags = GL_CONTEXT_FLAGS,
		CullFace = GL_CULL_FACE,
		CullFaceMode = GL_CULL_FACE_MODE,
		CurrentProgram = GL_CURRENT_PROGRAM,
		DepthClearValue = GL_DEPTH_CLEAR_VALUE,
		DepthFunc = GL_DEPTH_FUNC,
		DepthRange = GL_DEPTH_RANGE,
		DepthTest = GL_DEPTH_TEST,
		DepthWriteMask = GL_DEPTH_WRITEMASK,
		Dither = GL_DITHER,
		DoubleBuffer = GL_DOUBLEBUFFER,
		DrawBuffer = GL_DRAW_BUFFER,
		DrawFramebufferBinding = GL_DRAW_FRAMEBUFFER_BINDING,
		ReadFramebufferBinding = GL_READ_FRAMEBUFFER_BINDING,
		ElementArrayBufferBinding = GL_ELEMENT_ARRAY_BUFFER_BINDING,
		FragmentShaderDerivativeHint = GL_FRAGMENT_SHADER_DERIVATIVE_HINT,
		ImplementationColorReadFormat = GL_IMPLEMENTATION_COLOR_READ_FORMAT,
		ImplementationColorReadType = GL_IMPLEMENTATION_COLOR_READ_TYPE,
		LineSmooth = GL_LINE_SMOOTH,
		LineSmoothHint = GL_LINE_SMOOTH_HINT,
		LineWidth = GL_LINE_WIDTH,
		LayerProvokingVertex = GL_LAYER_PROVOKING_VERTEX,
		LogicOpMode = GL_LOGIC_OP_MODE,
		MajorVersion = GL_MAJOR_VERSION,
		Max3DTextureSize = GL_MAX_3D_TEXTURE_SIZE,
		MaxArrayTextureLayers = GL_MAX_ARRAY_TEXTURE_LAYERS,
		MaxClipDistances = GL_MAX_CLIP_DISTANCES,
		MaxColorTextureSamples = GL_MAX_COLOR_TEXTURE_SAMPLES,
		MaxCombinedAtomicCounters = GL_MAX_COMBINED_ATOMIC_COUNTERS,
		MaxCombinedFragmentUniformComponents = GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS,
		MaxCombinedGeometryUniformComponents = GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS,
		MaxCombinedTextureImageUnits = GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS,
		MaxCombinedUniformBlocks = GL_MAX_COMBINED_UNIFORM_BLOCKS,
		MaxCombinedVertexUniformComponents = GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS,
		MaxCubemapTextureSize = GL_MAX_CUBE_MAP_TEXTURE_SIZE,
		MaxDepthTextureSamples = GL_MAX_DEPTH_TEXTURE_SAMPLES,
		MaxDrawBuffers = GL_MAX_DRAW_BUFFERS,
		MaxDualSourceDrawBuffers = GL_MAX_DUAL_SOURCE_DRAW_BUFFERS,
		MaxElementsIndices = GL_MAX_ELEMENTS_INDICES,
		MaxElementsVertices = GL_MAX_ELEMENTS_VERTICES,
		MaxFragmentAtomicCounters = GL_MAX_FRAGMENT_ATOMIC_COUNTERS,
		MaxFragmentShaderStorageBlocks = GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS,
		MaxFragmentInputComponents = GL_MAX_FRAGMENT_INPUT_COMPONENTS,
		MaxFragmentUniformComponents = GL_MAX_FRAGMENT_UNIFORM_COMPONENTS,
		MaxFragmentUniformVectors = GL_MAX_FRAGMENT_UNIFORM_VECTORS,
		MaxFragmentUniformBlocks = GL_MAX_FRAGMENT_UNIFORM_BLOCKS,
		MaxFramebufferWidth = GL_MAX_FRAMEBUFFER_WIDTH,
		MaxFramebufferHeight = GL_MAX_FRAMEBUFFER_HEIGHT,
		MaxFramebufferLayers = GL_MAX_FRAMEBUFFER_LAYERS,
		MaxFramebufferSamples = GL_MAX_FRAMEBUFFER_SAMPLES,
		MaxGeometryAtomicCounters = GL_MAX_GEOMETRY_ATOMIC_COUNTERS,
		MaxGeometryShaderStorageBlocks = GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS,
		MaxGeometryInputComponents = GL_MAX_GEOMETRY_INPUT_COMPONENTS,
		MaxGeometryOutputComponents = GL_MAX_GEOMETRY_OUTPUT_COMPONENTS,
		MaxGeometryTextureImageUnits = GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS,
		MaxGeometryUniformBlocks = GL_MAX_GEOMETRY_UNIFORM_BLOCKS,
		MaxGeometryUniformComponents = GL_MAX_GEOMETRY_UNIFORM_COMPONENTS,
		MaxIntegerSamples = GL_MAX_INTEGER_SAMPLES,
		MinMapBufferAlignment = GL_MIN_MAP_BUFFER_ALIGNMENT,
		MaxLabelLength = GL_MAX_LABEL_LENGTH,
		MaxProgramTexelOffset = GL_MAX_PROGRAM_TEXEL_OFFSET,
		MinProgramTexelOffset = GL_MIN_PROGRAM_TEXEL_OFFSET,
		MaxRectangleTextureSize = GL_MAX_RECTANGLE_TEXTURE_SIZE,
		MaxRenderbufferSize = GL_MAX_RENDERBUFFER_SIZE,
		MaxSampleMaskWords = GL_MAX_SAMPLE_MASK_WORDS,
		MaxServerWaitTimeout = GL_MAX_SERVER_WAIT_TIMEOUT,
		MaxShaderStorageBufferBindings = GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS,
		MaxTessControlAtomicCounters = GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS,
		MaxTessEvaluationAtomicCounters = GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS,
		MaxTessControlShaderStorageBlocks = GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS,
		MaxTessEvaluationShaderStorageBlocks = GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS,
		MaxTextureBufferSize = GL_MAX_TEXTURE_BUFFER_SIZE,
		MaxTextureImageUnits = GL_MAX_TEXTURE_IMAGE_UNITS,
		MaxTextureLODBias = GL_MAX_TEXTURE_LOD_BIAS,
		MaxTextureSize = GL_MAX_TEXTURE_SIZE,
		MaxUniformBufferBindings = GL_MAX_UNIFORM_BUFFER_BINDINGS,
		MaxUniformBlockSize = GL_MAX_UNIFORM_BLOCK_SIZE,
		MaxUniformLocations = GL_MAX_UNIFORM_LOCATIONS,
		MaxVaryingComponents = GL_MAX_VARYING_COMPONENTS,
		MaxVaryingVectors = GL_MAX_VARYING_VECTORS,
		MaxVaryingFloats = GL_MAX_VARYING_FLOATS,
		MaxVertexAtomicCounters = GL_MAX_VERTEX_ATOMIC_COUNTERS,
		MaxVertexAttribs = GL_MAX_VERTEX_ATTRIBS,
		MaxVertexShaderStorageBlocks = GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS,
		MaxVertexTextureImageUnits = GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS,
		MaxVertexUniformComponents = GL_MAX_VERTEX_UNIFORM_COMPONENTS,
		MaxVertexUniformVectors = GL_MAX_VERTEX_UNIFORM_VECTORS,
		MaxVertexOutputComponents = GL_MAX_VERTEX_OUTPUT_COMPONENTS,
		MaxVertexUniformBlocks = GL_MAX_VERTEX_UNIFORM_BLOCKS,
		MaxViewportDims = GL_MAX_VIEWPORT_DIMS,
		MaxViewports = GL_MAX_VIEWPORTS,
		MinorVersion = GL_MINOR_VERSION,
		NumCompressedTextureFormats = GL_NUM_COMPRESSED_TEXTURE_FORMATS,
		NumExtensions = GL_NUM_EXTENSIONS,
		NumProgramBinaryFormats = GL_NUM_PROGRAM_BINARY_FORMATS,
		NumShaderBinaryFormats = GL_NUM_SHADER_BINARY_FORMATS,
		PackAlignment = GL_PACK_ALIGNMENT,
		PackImageHeight = GL_PACK_IMAGE_HEIGHT,
		PackLSBFirst = GL_PACK_LSB_FIRST,
		PackRowLength = GL_PACK_ROW_LENGTH,
		PackSkipImages = GL_PACK_SKIP_IMAGES,
		PackSkipPixels = GL_PACK_SKIP_PIXELS,
		PackSkipRows = GL_PACK_SKIP_ROWS,
		PackSwapBytes = GL_PACK_SWAP_BYTES,
		PixelPackBufferBinding = GL_PIXEL_PACK_BUFFER_BINDING,
		PixelUnpackBufferBinding = GL_PIXEL_UNPACK_BUFFER_BINDING,
		PointFadeThresholdSize = GL_POINT_FADE_THRESHOLD_SIZE,
		PrimitiveRestartIndex = GL_PRIMITIVE_RESTART_INDEX,
		ProgramBinaryFormats = GL_PROGRAM_BINARY_FORMATS,
		ProgramPipelineBinding = GL_PROGRAM_PIPELINE_BINDING,
		ProgramPointSize = GL_PROGRAM_POINT_SIZE,
		ProvokingVertex = GL_PROVOKING_VERTEX,
		PointSize = GL_POINT_SIZE,
		PointSizeGranularity = GL_POINT_SIZE_GRANULARITY,
		PointSizeRange = GL_POINT_SIZE_RANGE,
		PolygonOffsetFactor = GL_POLYGON_OFFSET_FACTOR,
		PolygonOffsetUnits = GL_POLYGON_OFFSET_UNITS,
		PolygonOffsetFill = GL_POLYGON_OFFSET_FILL,
		PolygonOffsetLine = GL_POLYGON_OFFSET_LINE,
		PolygonOffsetPoint = GL_POLYGON_OFFSET_POINT,
		PolygonSmooth = GL_POLYGON_SMOOTH,
		PolygonSmoothHint = GL_POLYGON_SMOOTH_HINT,
		ReadBuffer = GL_READ_BUFFER,
		RenderbufferBinding = GL_RENDERBUFFER_BINDING,
		SampleBuffers = GL_SAMPLE_BUFFERS,
		SampleCoverageValue = GL_SAMPLE_COVERAGE_VALUE,
		SampleCoverageInvert = GL_SAMPLE_COVERAGE_INVERT,
		SamplerBinding = GL_SAMPLER_BINDING,
		Samples = GL_SAMPLES,
		ScissorBox = GL_SCISSOR_BOX,
		ScissorTest = GL_SCISSOR_TEST,
		ShaderCompiler = GL_SHADER_COMPILER,
		ShaderStorageBufferBinding = GL_SHADER_STORAGE_BUFFER_BINDING,
		ShaderStorageBufferOffsetAlignment = GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT,
		ShaderStorageBufferStart = GL_SHADER_STORAGE_BUFFER_START,
		ShaderStorageBufferSize = GL_SHADER_STORAGE_BUFFER_SIZE,
		SmoothLineWidthRange = GL_SMOOTH_LINE_WIDTH_RANGE,
		SmoothLineWidthGranularity = GL_SMOOTH_LINE_WIDTH_GRANULARITY,
		StencilBackFail = GL_STENCIL_BACK_FAIL,
		StencilBackFunc = GL_STENCIL_BACK_FUNC,
		StencilBackPassDepthFail = GL_STENCIL_BACK_PASS_DEPTH_FAIL,
		StencilBackPassDepthPass = GL_STENCIL_BACK_PASS_DEPTH_PASS,
		StencilBackRef = GL_STENCIL_BACK_REF,
		StencilBackValueMask = GL_STENCIL_BACK_VALUE_MASK,
		StencilBackWriteMask = GL_STENCIL_BACK_WRITEMASK,
		StencilClearValue = GL_STENCIL_CLEAR_VALUE,
		StencilFail = GL_STENCIL_FAIL,
		StencilFunc = GL_STENCIL_FUNC,
		StencilPassDepthFail = GL_STENCIL_PASS_DEPTH_FAIL,
		StencilPassDepthPass = GL_STENCIL_PASS_DEPTH_PASS,
		StencilRef = GL_STENCIL_REF,
		StencilTest = GL_STENCIL_TEST,
		StencilValueMask = GL_STENCIL_VALUE_MASK,
		StencilWriteMask = GL_STENCIL_WRITEMASK,
		Stereo = GL_STEREO,
		SubpixelBits = GL_SUBPIXEL_BITS,
		TextureBinding1D = GL_TEXTURE_BINDING_1D,
		TextureBinding1DArray = GL_TEXTURE_BINDING_1D_ARRAY,
		TextureBinding2D = GL_TEXTURE_BINDING_2D,
		TextureBinding2DArray = GL_TEXTURE_BINDING_2D_ARRAY,
		TextureBinding2DMultisample = GL_TEXTURE_BINDING_2D_MULTISAMPLE,
		TextureBinding2DMultisampleArray = GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY,
		TextureBinding3D = GL_TEXTURE_BINDING_3D,
		TextureBindingBuffer = GL_TEXTURE_BINDING_BUFFER,
		TextureBindingCubemap = GL_TEXTURE_BINDING_CUBE_MAP,
		TextureBindingRectangle = GL_TEXTURE_BINDING_RECTANGLE,
		TextureCompressionHint = GL_TEXTURE_COMPRESSION_HINT,
		TextureBufferOffsetAlignment = GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT,
		Timestamp = GL_TIMESTAMP,
		TransformFeedbackBufferBinding = GL_TRANSFORM_FEEDBACK_BUFFER_BINDING,
		TransformFeedbackBufferStart = GL_TRANSFORM_FEEDBACK_BUFFER_START,
		TransformFeedbackBufferSize = GL_TRANSFORM_FEEDBACK_BUFFER_SIZE,
		UniformBufferBinding = GL_UNIFORM_BUFFER_BINDING,
		UniformBufferOffsetAlignment = GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT,
		UniformBufferSize = GL_UNIFORM_BUFFER_SIZE,
		UniformBufferStart = GL_UNIFORM_BUFFER_START,
		UnpackAlignment = GL_UNPACK_ALIGNMENT,
		UnpackImageHeight = GL_UNPACK_IMAGE_HEIGHT,
		UnpackLSBFirst = GL_UNPACK_LSB_FIRST,
		UnpackRowLength = GL_UNPACK_ROW_LENGTH,
		UnpackSkipImages = GL_UNPACK_SKIP_IMAGES,
		UnpackSkipPixels = GL_UNPACK_SKIP_PIXELS,
		UnpackSkipRows = GL_UNPACK_SKIP_ROWS,
		UnpackSwapBytes = GL_UNPACK_SWAP_BYTES,
		VertexArrayBinding = GL_VERTEX_ARRAY_BINDING,
		VertexBindingDivisor = GL_VERTEX_BINDING_DIVISOR,
		VertexBindingOffset = GL_VERTEX_BINDING_OFFSET,
		VertexBindingStride = GL_VERTEX_BINDING_STRIDE,
		VertexBindingBuffer = GL_VERTEX_BINDING_BUFFER,
		MaxVertexAttribRelativeOffset = GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET,
		MaxVertexAttribBindings = GL_MAX_VERTEX_ATTRIB_BINDINGS,
		Viewport = GL_VIEWPORT,
		ViewportBoundsRange = GL_VIEWPORT_BOUNDS_RANGE,
		ViewportIndexProvokingVertex = GL_VIEWPORT_INDEX_PROVOKING_VERTEX,
		ViewportSubpixelBits = GL_VIEWPORT_SUBPIXEL_BITS,
		MaxElementIndex = GL_MAX_ELEMENT_INDEX,
	};

	/**
	 * Available data formats. Different from the objects' own
	 * internal format. This is used in conjunction with the
	 * `DataType` enum and serves to identify what components
	 * are to be used and their meaning.
	 */
	enum struct DataFormat : GLenum
	{
		Red = GL_RED,
		RG = GL_RG,
		RGB = GL_RGB,
		BGR = GL_BGR,
		RGBA = GL_RGBA,
		BGRA = GL_BGRA,
		RedInt = GL_RED_INTEGER,
		RGInt = GL_RG_INTEGER,
		RGBInt = GL_RGB_INTEGER,
		BGRInt = GL_BGR_INTEGER,
		RGBAInt = GL_RGBA_INTEGER,
		BGRAInt = GL_BGRA_INTEGER,
		Depth = GL_DEPTH_COMPONENT,
		Stencil = GL_STENCIL_INDEX,
		DepthStencil = GL_DEPTH_STENCIL,
	};

	/**
	 * Available data types. Different from the objects' own
	 * internal format. This is used in conjunction with the
	 * `DataFormat` enum and serves to identify the type and
	 * size of the components.
	 */
	enum struct DataType : GLenum
	{
		UByte = GL_UNSIGNED_BYTE,
		Byte = GL_BYTE,
		UShort = GL_UNSIGNED_SHORT,
		Short = GL_SHORT,
		UInt = GL_UNSIGNED_INT,
		Int = GL_INT,
		Half = GL_HALF_FLOAT,
		Float = GL_FLOAT,
		UByte332 = GL_UNSIGNED_BYTE_3_3_2,
		UByte332Rev = GL_UNSIGNED_BYTE_2_3_3_REV,
		UShort565 = GL_UNSIGNED_SHORT_5_6_5,
		UShort565Rev = GL_UNSIGNED_SHORT_5_6_5_REV,
		UShort4 = GL_UNSIGNED_SHORT_4_4_4_4,
		UShort4Rev = GL_UNSIGNED_SHORT_4_4_4_4_REV,
		UShort5551 = GL_UNSIGNED_SHORT_5_5_5_1,
		UShort5551Rev = GL_UNSIGNED_SHORT_1_5_5_5_REV,
		UInt8 = GL_UNSIGNED_INT_8_8_8_8,
		UInt8Rev = GL_UNSIGNED_INT_8_8_8_8_REV,
		UIntAAA2 = GL_UNSIGNED_INT_10_10_10_2,
		UIntAAA2Rev = GL_UNSIGNED_INT_2_10_10_10_REV,
	};

	/**
	 * Policies for access of various data.
	 */
	enum struct AccessPolicy : GLenum
	{
		Invalid = GL_INVALID_ENUM,
		ReadOnly = GL_READ_ONLY,
		WriteOnly = GL_WRITE_ONLY,
		ReadWrite = GL_READ_WRITE,
	};

	/**
	 * Primitives accepted by drawing commands.
	 */
	enum struct PrimitiveType : GLenum
	{
		Points = GL_POINTS,
		LineStrip = GL_LINE_STRIP,
		LineLoop = GL_LINE_LOOP,
		Lines = GL_LINES,
		LineStripAdjacency = GL_LINE_STRIP_ADJACENCY,
		LinesAdjacency = GL_LINES_ADJACENCY,
		TriangleStrip = GL_TRIANGLE_STRIP,
		TriangleFan = GL_TRIANGLE_FAN,
		Triangles = GL_TRIANGLES,
		TriangleStripAdjacency = GL_TRIANGLE_STRIP_ADJACENCY,
		TrianglesAdjacency = GL_TRIANGLES_ADJACENCY,
		Patches = GL_PATCHES,
	};

	/**
	 * Data type of element indices for drawing commands.
	 */
	enum struct ElementType : GLenum
	{
		Byte = GL_UNSIGNED_BYTE,
		Short = GL_UNSIGNED_SHORT,
		Int = GL_UNSIGNED_INT,
	};

	/**
	 * Names for insertable memory barriers.
	 */
	 enum struct MemoryBarrierType : GLenum
	 {
		VertexAttribArray = GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT,
		ElementArray = GL_ELEMENT_ARRAY_BARRIER_BIT,
		Uniform = GL_UNIFORM_BARRIER_BIT,
		ShaderTextureFetch = GL_TEXTURE_FETCH_BARRIER_BIT,
		ShaderImageAccess = GL_SHADER_IMAGE_ACCESS_BARRIER_BIT,
		Command = GL_COMMAND_BARRIER_BIT,
		PixelBuffer = GL_PIXEL_BUFFER_BARRIER_BIT,
		TextureUpdate = GL_TEXTURE_UPDATE_BARRIER_BIT,
		BufferUpdate = GL_BUFFER_UPDATE_BARRIER_BIT,
		ClientMappedBuffer = GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT,
		QueryBuffer = GL_QUERY_BUFFER_BARRIER_BIT,
		Framebuffer = GL_FRAMEBUFFER_BARRIER_BIT,
		TransformFeedback = GL_TRANSFORM_FEEDBACK_BARRIER_BIT,
		AtomicCounter = GL_ATOMIC_COUNTER_BARRIER_BIT,
		ShaderStorage = GL_SHADER_STORAGE_BARRIER_BIT,
		All = GL_ALL_BARRIER_BITS,
	 };

	/**
	 * Possible sources for debug messages.
	 */
	enum struct DebugMessageSource : GLenum
	{
		DontCare = GL_DONT_CARE,
		API = GL_DEBUG_SOURCE_API,
		WindowSystem = GL_DEBUG_SOURCE_WINDOW_SYSTEM,
		ShaderCompiler = GL_DEBUG_SOURCE_SHADER_COMPILER,
		ThirdParty = GL_DEBUG_SOURCE_THIRD_PARTY,
		Application = GL_DEBUG_SOURCE_APPLICATION,
		Other = GL_DEBUG_SOURCE_OTHER,
	};

	/**
	 * Possible types for debug messages.
	 */
	enum struct DebugMessageType : GLenum
	{
		DontCare = GL_DONT_CARE,
		Error = GL_DEBUG_TYPE_ERROR,
		DeprecatedBehavior = GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR,
		UndefinedBehavior = GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR,
		Portability = GL_DEBUG_TYPE_PORTABILITY,
		Performance = GL_DEBUG_TYPE_PERFORMANCE,
		Marker = GL_DEBUG_TYPE_MARKER,
		PushGroup = GL_DEBUG_TYPE_PUSH_GROUP,
		PopGroup = GL_DEBUG_TYPE_POP_GROUP,
		Other = GL_DEBUG_TYPE_OTHER,
	};

	/**
	 * Possible severity for debug messages.
	 */
	enum struct DebugMessageSeverity : GLenum
	{
		DontCare = GL_DONT_CARE,
		Notification = GL_DEBUG_SEVERITY_NOTIFICATION,
		Low = GL_DEBUG_SEVERITY_LOW,
		Medium = GL_DEBUG_SEVERITY_MEDIUM,
		High = GL_DEBUG_SEVERITY_HIGH,
	};

	// #####################################
	// # Vertex array-related enum structs #
	// #####################################

	/**
	 * Data type of vertex attributes.
	 */
	enum struct VertexAttribType : GLenum
	{
		UByte = GL_UNSIGNED_BYTE,
		Byte = GL_BYTE,
		UShort = GL_UNSIGNED_SHORT,
		Short = GL_SHORT,
		UInt = GL_UNSIGNED_INT,
		Int = GL_INT,
		Half = GL_HALF_FLOAT,
		Float = GL_FLOAT,
		Double = GL_DOUBLE,
		Fixed = GL_FIXED,
		UIntAAA2Rev = GL_UNSIGNED_INT_2_10_10_10_REV,
		IntAAA2Rev = GL_INT_2_10_10_10_REV,
		UIntBfBfAfRev = GL_UNSIGNED_INT_10F_11F_11F_REV,
	};

	// ###############################
	// # Buffer-related enum structs #
	// ###############################

	/**
	 * Valid targets for buffer binding.
	 * `Dynamic` is not a real target and is only present for templating purposes.
	 */
	enum struct BufferTarget : GLenum
	{
		Dynamic = GL_INVALID_ENUM,
		// Buffers
		Array = GL_ARRAY_BUFFER,
		AtomicCounter = GL_ATOMIC_COUNTER_BUFFER,
		CopyRead = GL_COPY_READ_BUFFER,
		CopyWrite = GL_COPY_WRITE_BUFFER,
		DispatchIndirect = GL_DISPATCH_INDIRECT_BUFFER,
		DrawIndirect = GL_DRAW_INDIRECT_BUFFER,
		ElementArray = GL_ELEMENT_ARRAY_BUFFER,
		PixelPack = GL_PIXEL_PACK_BUFFER,
		PixelUnpack = GL_PIXEL_UNPACK_BUFFER,
		Query = GL_QUERY_BUFFER,
		ShaderStorage = GL_SHADER_STORAGE_BUFFER,
		Texture = GL_TEXTURE_BUFFER,
		TransformFeedback = GL_TRANSFORM_FEEDBACK_BUFFER,
		Uniform = GL_UNIFORM_BUFFER
	};

	/**
	 * Names for indexed buffer targets.
	 */
	enum struct IndexedBufferTarget : GLenum
	{
		AtomicCounter = GL_ATOMIC_COUNTER_BUFFER,
		ShaderStorage = GL_SHADER_STORAGE_BUFFER,
		TransformFeedback = GL_TRANSFORM_FEEDBACK_BUFFER,
		Uniform = GL_UNIFORM_BUFFER
	};

	/**
	 * Buffer's usage for data upload.
	 */
	enum struct BufferUsage : GLenum
	{
		StreamDraw = GL_STREAM_DRAW,
		StreamRead = GL_STREAM_READ,
		StreamCopy = GL_STREAM_COPY,
		StaticDraw = GL_STATIC_DRAW,
		StaticRead = GL_STATIC_READ,
		StaticCopy = GL_STATIC_COPY,
		DynamicDraw = GL_DYNAMIC_DRAW,
		DynamicRead = GL_DYNAMIC_READ,
		DynamicCopy = GL_DYNAMIC_COPY
	};

	/**
	 * Buffer data internal formats.
	 */
	enum struct BufferDataFormat : GLenum
	{
		Red8 = GL_R8,
		Red16 = GL_R16,
		Red16f = GL_R16F,
		Red32f = GL_R32F,
		Red8i = GL_R8I,
		Red16i = GL_R16I,
		Red32i = GL_R32I,
		Red8ui = GL_R8UI,
		Red16ui = GL_R16UI,
		Red32ui = GL_R32UI,
		RG8 = GL_RG8,
		RG16 = GL_RG16,
		RG16f = GL_RG16F,
		RG32f = GL_RG32F,
		RG8i = GL_RG8I,
		RG16i = GL_RG16I,
		RG32i = GL_RG32I,
		RG8ui = GL_RG8UI,
		RG16ui = GL_RG16UI,
		RG32ui = GL_RG32UI,
		RGB32f = GL_RGB32F,
		RGB32i = GL_RGB32I,
		RGB32ui = GL_RGB32UI,
		RGBA8 = GL_RGBA8,
		RGBA16 = GL_RGBA16,
		RGBA16f = GL_RGBA16F,
		RGBA32f = GL_RGBA32F,
		RGBA8i = GL_RGBA8I,
		RGBA16i = GL_RGBA16I,
		RGBA32i = GL_RGBA32I,
		RGBA8ui = GL_RGBA8UI,
		RGBA16ui = GL_RGBA16UI,
		RGBA32ui = GL_RGBA32UI,
	};

	/**
	 * Names for a buffer's parameters.
	 */
	enum struct BufferParam : GLenum
	{
		Access = GL_BUFFER_ACCESS,
		AccessFlags = GL_BUFFER_ACCESS_FLAGS,
		ImmutableStorage = GL_BUFFER_IMMUTABLE_STORAGE,
		Mapped = GL_BUFFER_MAPPED,
		MapLength = GL_BUFFER_MAP_LENGTH,
		MapOffset = GL_BUFFER_MAP_OFFSET,
		Size = GL_BUFFER_SIZE,
		StorageFlags = GL_BUFFER_STORAGE_FLAGS,
		Usage = GL_BUFFER_USAGE
	};

	// ################################
	// # Texture-related enum structs #
	// ################################

	/**
	 * Valid targets for texture creation.
	 * `Dynamic` is not a real target and is only present for templating purposes.
	 */
	enum struct TextureTarget : GLenum
	{
		Dynamic = GL_INVALID_ENUM,
		// Textures
		Texture1D = GL_TEXTURE_1D,
		Texture2D = GL_TEXTURE_2D,
		Texture3D = GL_TEXTURE_3D,
		Texture1DArray = GL_TEXTURE_1D_ARRAY,
		Texture2DArray = GL_TEXTURE_2D_ARRAY,
		TextureRectangle = GL_TEXTURE_RECTANGLE,
		TextureCubemap = GL_TEXTURE_CUBE_MAP,
		TextureCubemapArray = GL_TEXTURE_CUBE_MAP_ARRAY,
		Texture2DMultisample = GL_TEXTURE_2D_MULTISAMPLE,
		Texture2DMultisampleArray = GL_TEXTURE_2D_MULTISAMPLE_ARRAY,
		TextureBuffer = GL_TEXTURE_BUFFER,
		// Proxies
		Proxy1D = GL_PROXY_TEXTURE_1D,
		Proxy2D = GL_PROXY_TEXTURE_2D,
		Proxy3D = GL_PROXY_TEXTURE_3D,
		Proxy1DArray = GL_PROXY_TEXTURE_1D_ARRAY,
		Proxy2DArray = GL_PROXY_TEXTURE_2D_ARRAY,
		ProxyRectangle = GL_PROXY_TEXTURE_RECTANGLE,
		ProxyCubemap = GL_PROXY_TEXTURE_CUBE_MAP,
		ProxyCubemapArray = GL_PROXY_TEXTURE_CUBE_MAP_ARRAY,
		Proxy2DMultisample = GL_PROXY_TEXTURE_2D_MULTISAMPLE,
		Proxy2DMultisampleArray = GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY,
	};

	/**
	 * Internal formats that a texture can adopt. This is different
	 * from the format of the pixel data that is fed to it.
	 * `Dynamic` is not a real format and is only present for templating purposes.
	 */
	enum struct TextureFormat : GLenum
	{
		Dynamic = GL_INVALID_ENUM,
		// Base internal formats
		Red = GL_RED,
		RG = GL_RG,
		RGB = GL_RGB,
		RGBA = GL_RGBA,
		Depth = GL_DEPTH_COMPONENT,
		DepthStencil = GL_DEPTH_STENCIL,
		// Sized internal formats
		Red8 = GL_R8,
		Red8s = GL_R8_SNORM,
		Red16 = GL_R16,
		Red16s = GL_R16_SNORM,
		RG8 = GL_RG8,
		RG8s = GL_RG8_SNORM,
		RG16 = GL_RG16,
		RG16s = GL_RG16_SNORM,
		RGB332 = GL_R3_G3_B2,
		RGB4 = GL_RGB4,
		RGB5 = GL_RGB5,
		RGB8 = GL_RGB8,
		RGB8s = GL_RGB8_SNORM,
		RGB10 = GL_RGB10,
		RGB12 = GL_RGB12,
		RGB16s = GL_RGB16_SNORM,
		RGBA2 = GL_RGBA2,
		RGBA4 = GL_RGBA4,
		RGB5A1 = GL_RGB5_A1,
		RGBA8 = GL_RGBA8,
		RGBA8s = GL_RGBA8_SNORM,
		RGB10A2 = GL_RGB10_A2,
		RGB10A2ui = GL_RGB10_A2UI,
		RGBA12 = GL_RGBA12,
		RGBA16 = GL_RGBA16,
		SRGB8 = GL_SRGB8,
		SRGBA8 = GL_SRGB8_ALPHA8,
		Red16f = GL_R16F,
		RG16f = GL_RG16F,
		RGB16f = GL_RGB16F,
		RGBA16f = GL_RGBA16F,
		Red32f = GL_R32F,
		RG32f = GL_RG32F,
		RGB32f = GL_RGB32F,
		RGBA32f = GL_RGBA32F,
		R11G11B10f = GL_R11F_G11F_B10F,
		RGB9E5 = GL_RGB9_E5,
		Red8i = GL_R8I,
		Red8ui = GL_R8UI,
		Red16i = GL_R16I,
		Red16ui = GL_R16UI,
		Red32i = GL_R32I,
		Red32ui = GL_R32UI,
		RG8i = GL_RG8I,
		RG8ui = GL_RG8UI,
		RG16i = GL_RG16I,
		RG16ui = GL_RG16UI,
		RG32i = GL_RG32I,
		RG32ui = GL_RG32UI,
		RGB8i = GL_RGB8I,
		RGB8ui = GL_RGB8UI,
		RGB16i = GL_RGB16I,
		RGB16ui = GL_RGB16UI,
		RGB32i = GL_RGB32I,
		RGB32ui = GL_RGB32UI,
		RGBA8i = GL_RGBA8I,
		RGBA8ui = GL_RGBA8UI,
		RGBA16i = GL_RGBA16I,
		RGBA16ui = GL_RGBA16UI,
		RGBA32i = GL_RGBA32I,
		RGBA32ui = GL_RGBA32UI,
		// Compressed internal formats
		RedComp = GL_COMPRESSED_RED,
		RGComp = GL_COMPRESSED_RG,
		RGBComp = GL_COMPRESSED_RGB,
		RGBAComp = GL_COMPRESSED_RGBA,
		SRGBComp = GL_COMPRESSED_SRGB,
		SRGBAComp = GL_COMPRESSED_SRGB_ALPHA,
	};

	/**
	 * Faces of a cubemap.
	 */
	enum struct CubemapFace : GLenum
	{
		PlusX = GL_TEXTURE_CUBE_MAP_POSITIVE_X,
		MinusX = GL_TEXTURE_CUBE_MAP_NEGATIVE_X,
		PlusY = GL_TEXTURE_CUBE_MAP_POSITIVE_Y,
		MinusY = GL_TEXTURE_CUBE_MAP_NEGATIVE_Y,
		PlusZ = GL_TEXTURE_CUBE_MAP_POSITIVE_Z,
		MinusZ = GL_TEXTURE_CUBE_MAP_NEGATIVE_Z,
	};

	/**
	 * Names for a texture's parameters.
	 */
	enum struct TextureParam : GLenum
	{
		DepthStencilMode = GL_DEPTH_STENCIL_TEXTURE_MODE,
		BaseLevel = GL_TEXTURE_BASE_LEVEL,
		BorderColor = GL_TEXTURE_BORDER_COLOR,
		CompareFunc = GL_TEXTURE_COMPARE_FUNC,
		CompareMode = GL_TEXTURE_COMPARE_MODE,
		LODBias = GL_TEXTURE_LOD_BIAS,
		MinFilter = GL_TEXTURE_MIN_FILTER,
		MagFilter = GL_TEXTURE_MAG_FILTER,
		MinLOD = GL_TEXTURE_MIN_LOD,
		MaxLOD = GL_TEXTURE_MAX_LOD,
		MaxLevel = GL_TEXTURE_MAX_LEVEL,
		SwizzleR = GL_TEXTURE_SWIZZLE_R,
		SwizzleG = GL_TEXTURE_SWIZZLE_G,
		SwizzleB = GL_TEXTURE_SWIZZLE_B,
		SwizzleA = GL_TEXTURE_SWIZZLE_A,
		SwizzleRGBA = GL_TEXTURE_SWIZZLE_RGBA,
		WrapS = GL_TEXTURE_WRAP_S,
		WrapT = GL_TEXTURE_WRAP_T,
		WrapR = GL_TEXTURE_WRAP_R,
		// Read-only parameters
		ViewImmutableLevels = GL_TEXTURE_IMMUTABLE_LEVELS,
		ViewMinLayer = GL_TEXTURE_VIEW_MIN_LAYER,
		ViewNumLayers = GL_TEXTURE_VIEW_NUM_LAYERS,
		ViewMinLevel = GL_TEXTURE_VIEW_MIN_LEVEL,
		ViewNumLevels = GL_TEXTURE_VIEW_NUM_LEVELS,
		ImageFormatCompatibilityType = GL_IMAGE_FORMAT_COMPATIBILITY_TYPE,
		HasImmutableFormat = GL_TEXTURE_IMMUTABLE_FORMAT,
	};

	/**
	 * Possible values of texture parameters that accept symbolic constants as values.
	 */
	enum struct TextureParamValue : GLenum
	{
		Invalid = GL_INVALID_ENUM,
		// DepthStencilMode
		DepthMode = GL_DEPTH_COMPONENT,
		StencilMode = GL_STENCIL_INDEX,
		// CompareFunc
		FuncLEqual = GL_LEQUAL,
		FuncGEqual = GL_GEQUAL,
		FuncLess = GL_LESS,
		FuncGreater = GL_GREATER,
		FuncEqual = GL_EQUAL,
		FuncNotEqual = GL_NOTEQUAL,
		FuncAlways = GL_ALWAYS,
		FuncNever = GL_NEVER,
		// CompareMode
		CompareRefToTexture = GL_COMPARE_REF_TO_TEXTURE,
		NoCompare = GL_NONE,
		// Min & MagFilter
		FilterNearest = GL_NEAREST,
		FilterLinear = GL_LINEAR,
		FilterNearestMipmapNearest = GL_NEAREST_MIPMAP_NEAREST,
		FilterNearestMipmapLinear = GL_NEAREST_MIPMAP_LINEAR,
		FilterLinearMipmapNearest = GL_LINEAR_MIPMAP_NEAREST,
		FilterLinearMipmapLinear = GL_LINEAR_MIPMAP_LINEAR,
		// Swizzling
		SwizzleRed = GL_RED,
		SwizzleGreen = GL_GREEN,
		SwizzleBlue = GL_BLUE,
		SwizzleAlpha = GL_ALPHA,
		SwizzleZero = GL_ZERO,
		SwizzleOne = GL_ONE,
		// Wrapping
		ClampToEdge = GL_CLAMP_TO_EDGE,
		ClampToBorder = GL_CLAMP_TO_BORDER,
		MirrorRepeat = GL_MIRRORED_REPEAT,
		Repeat = GL_REPEAT,
		MirrorClampToEdge = GL_MIRROR_CLAMP_TO_EDGE,
	};

	/**
	 * Names for a texture level's parameters.
	 */
	enum struct TextureLevelParam : GLenum
	{
		Width = GL_TEXTURE_WIDTH,
		Height = GL_TEXTURE_HEIGHT,
		Depth = GL_TEXTURE_DEPTH,
		RedType = GL_TEXTURE_RED_TYPE,
		GreenType = GL_TEXTURE_GREEN_TYPE,
		BlueType = GL_TEXTURE_BLUE_TYPE,
		AlphaType = GL_TEXTURE_ALPHA_TYPE,
		DepthType = GL_TEXTURE_DEPTH_TYPE,
		RedSize = GL_TEXTURE_RED_SIZE,
		GreenSize = GL_TEXTURE_GREEN_SIZE,
		BlueSize = GL_TEXTURE_BLUE_SIZE,
		AlphaSize = GL_TEXTURE_ALPHA_SIZE,
		DepthSize = GL_TEXTURE_DEPTH_SIZE,
		Compressed = GL_TEXTURE_COMPRESSED,
		CompressedSize = GL_TEXTURE_COMPRESSED_IMAGE_SIZE,
		BufferDataStoreBinding = GL_TEXTURE_BUFFER_DATA_STORE_BINDING,
		BufferOffset = GL_TEXTURE_BUFFER_OFFSET,
		BufferSize = GL_TEXTURE_BUFFER_SIZE,
	};

	/**
	 * Possible data types of the components of a texture.
	 */
	enum struct TextureComponentType : GLenum
	{
		None = GL_NONE,
		Norm = GL_SIGNED_NORMALIZED,
		UNorm = GL_UNSIGNED_NORMALIZED,
		Float = GL_FLOAT,
		Int = GL_INT,
		Uint = GL_UNSIGNED_INT,
	};

	// ###############################
	// # Shader-related enum structs #
	// ###############################

	/**
     * Shader types for shader object creation.
     */
    enum struct ShaderType : GLenum
    {
        Compute = GL_COMPUTE_SHADER,
        Fragment = GL_FRAGMENT_SHADER,
        Geometry = GL_GEOMETRY_SHADER,
        TessControl = GL_TESS_CONTROL_SHADER,
        TessEvaluation = GL_TESS_EVALUATION_SHADER,
        Vertex = GL_VERTEX_SHADER,
    };

	/**
	 * Names for a shader object's parameters.
	 */
	enum struct ShaderParam : GLenum
	{
	    Type = GL_SHADER_TYPE,
		DeleteStatus = GL_DELETE_STATUS,
		CompileStatus = GL_COMPILE_STATUS,
		InfoLogLength = GL_INFO_LOG_LENGTH,
		SourceLength = GL_SHADER_SOURCE_LENGTH,
	};

	// #######################################
	// # Shader program-related enum structs #
	// #######################################

	/**
	 * Names for a shader program's parameters.
	 */
	enum struct ProgramParam : GLenum
	{
		DeleteStatus = GL_DELETE_STATUS,
		LinkStatus = GL_LINK_STATUS,
		ValidateStatus = GL_VALIDATE_STATUS,
		InfoLogLength = GL_INFO_LOG_LENGTH,
		AttachedShaders = GL_ATTACHED_SHADERS,
		ActiveAtomicCounterBuffers = GL_ACTIVE_ATOMIC_COUNTER_BUFFERS,
		ActiveAttributes = GL_ACTIVE_ATTRIBUTES,
		ActiveAttributeMaxNameLength = GL_ACTIVE_ATTRIBUTE_MAX_LENGTH,
		ActiveUniforms = GL_ACTIVE_UNIFORMS,
		ActiveUniformMaxNameLength = GL_ACTIVE_UNIFORM_MAX_LENGTH,
		BinaryLength = GL_PROGRAM_BINARY_LENGTH,
		ComputeWorkGroupSize = GL_COMPUTE_WORK_GROUP_SIZE,
		TransformFeedbackBufferMode = GL_TRANSFORM_FEEDBACK_BUFFER_MODE,
		TransformFeedbackVaryings = GL_TRANSFORM_FEEDBACK_VARYINGS,
		TransformFeedbackVaryingMaxNameLength = GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH,
		GeometryVerticesOut = GL_GEOMETRY_VERTICES_OUT,
		GeometryInputType = GL_GEOMETRY_INPUT_TYPE,
		GeometryOutputType = GL_GEOMETRY_OUTPUT_TYPE,
		RetrievableBinaryHint = GL_PROGRAM_BINARY_RETRIEVABLE_HINT,
		Separable = GL_PROGRAM_SEPARABLE,
	};

	// ####################################
	// # Framebuffer-related enum structs #
	// ####################################

	/**
	 * Draw buffer names for commands on framebuffers.
	 */
	enum struct DrawBufferType : GLenum
	{
		Color = GL_COLOR,
		Depth = GL_DEPTH,
		Stencil = GL_STENCIL,
		DepthStencil = GL_DEPTH_STENCIL,
	};

	/**
	 * Attachment points for a framebuffer.
	 */
	enum struct FramebufferAttachment : GLenum
	{
		Color = GL_COLOR_ATTACHMENT0,
		Depth = GL_DEPTH_ATTACHMENT,
		Stencil = GL_STENCIL_ATTACHMENT,
		DepthStencil = GL_DEPTH_STENCIL_ATTACHMENT,
	};

	/**
	 * Valid targets for framebuffer binding.
	 */
	enum struct FramebufferTarget : GLenum
	{
		Draw = GL_DRAW_FRAMEBUFFER,
		Read = GL_READ_FRAMEBUFFER,
		DrawRead = GL_FRAMEBUFFER,
	};

	/**
	 * Names for a framebuffer's parameters.
	 */
	enum struct FramebufferParam : GLenum
	{
		DefaultWidth = GL_FRAMEBUFFER_DEFAULT_WIDTH,
		DefaultHeight = GL_FRAMEBUFFER_DEFAULT_HEIGHT,
		DefaultLayers = GL_FRAMEBUFFER_DEFAULT_LAYERS,
		DefaultSamples = GL_FRAMEBUFFER_DEFAULT_SAMPLES,
		DefaultFixedSampleLocations = GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS,
	};

	/**
	 * Possible states that a framebuffer can be in.
	 */
	enum struct FramebufferStatus : GLenum
	{
		Error = 0,
		Complete = GL_FRAMEBUFFER_COMPLETE,
		Undefined = GL_FRAMEBUFFER_UNDEFINED,
		IncompleteAttachment = GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT,
		IncompleteMissingAttachment = GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT,
		IncompleteDrawBuffer = GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER,
		IncompleteReadBuffer = GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER,
		Unsupported = GL_FRAMEBUFFER_UNSUPPORTED,
		IncompleteMultisample = GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE,
		IncompleteLayerTargets = GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS,
	};

	// #####################################
	// # Renderbuffer-related enum structs #
	// #####################################

	/**
	 * Data format that a Renderbuffer can adopt.
	 */
	enum struct RenderbufferFormat : GLenum
	{
		// Color
		Red = GL_RED,
		RG = GL_RG,
		RGB = GL_RGB,
		RGBA = GL_RGBA,
		Red8 = GL_R8,
		Red8s = GL_R8_SNORM,
		Red16 = GL_R16,
		Red16s = GL_R16_SNORM,
		RG8 = GL_RG8,
		RG8s = GL_RG8_SNORM,
		RG16 = GL_RG16,
		RG16s = GL_RG16_SNORM,
		RGB332 = GL_R3_G3_B2,
		RGB4 = GL_RGB4,
		RGB5 = GL_RGB5,
		RGB8 = GL_RGB8,
		RGB8s = GL_RGB8_SNORM,
		RGB10 = GL_RGB10,
		RGB12 = GL_RGB12,
		RGB16s = GL_RGB16_SNORM,
		RGBA2 = GL_RGBA2,
		RGBA4 = GL_RGBA4,
		RGB5A1 = GL_RGB5_A1,
		RGBA8 = GL_RGBA8,
		RGBA8s = GL_RGBA8_SNORM,
		RGB10A2 = GL_RGB10_A2,
		RGB10A2ui = GL_RGB10_A2UI,
		RGBA12 = GL_RGBA12,
		RGBA16 = GL_RGBA16,
		SRGB8 = GL_SRGB8,
		SRGBA8 = GL_SRGB8_ALPHA8,
		Red16f = GL_R16F,
		RG16f = GL_RG16F,
		RGB16f = GL_RGB16F,
		RGBA16f = GL_RGBA16F,
		Red32f = GL_R32F,
		RG32f = GL_RG32F,
		RGB32f = GL_RGB32F,
		RGBA32f = GL_RGBA32F,
		R11G11B10f = GL_R11F_G11F_B10F,
		Red8i = GL_R8I,
		Red8ui = GL_R8UI,
		Red16i = GL_R16I,
		Red16ui = GL_R16UI,
		Red32i = GL_R32I,
		Red32ui = GL_R32UI,
		RG8i = GL_RG8I,
		RG8ui = GL_RG8UI,
		RG16i = GL_RG16I,
		RG16ui = GL_RG16UI,
		RG32i = GL_RG32I,
		RG32ui = GL_RG32UI,
		RGB8i = GL_RGB8I,
		RGB8ui = GL_RGB8UI,
		RGB16i = GL_RGB16I,
		RGB16ui = GL_RGB16UI,
		RGB32i = GL_RGB32I,
		RGB32ui = GL_RGB32UI,
		RGBA8i = GL_RGBA8I,
		RGBA8ui = GL_RGBA8UI,
		RGBA16i = GL_RGBA16I,
		RGBA16ui = GL_RGBA16UI,
		RGBA32i = GL_RGBA32I,
		RGBA32ui = GL_RGBA32UI,
		// Depth
		Depth = GL_DEPTH_COMPONENT,
		Depth16 = GL_DEPTH_COMPONENT16,
		Depth24 = GL_DEPTH_COMPONENT24,
		Depth32 = GL_DEPTH_COMPONENT32,
		Depth32f = GL_DEPTH_COMPONENT32F,
		// Stencil
		Stencil = GL_STENCIL_INDEX,
		Stencil1 = GL_STENCIL_INDEX1,
		Stencil4 = GL_STENCIL_INDEX4,
		Stencil8 = GL_STENCIL_INDEX8,
		Stencil16 = GL_STENCIL_INDEX16,
		// Depth-stencil
		DepthStencil = GL_DEPTH_STENCIL,
		Depth24Stencil8 = GL_DEPTH24_STENCIL8,
		Depth32fStencil8 = GL_DEPTH32F_STENCIL8
	};

	/**
	 * Names for a Renderbuffer's parameters.
	 */
	enum struct RenderbufferParam : GLenum
	{
		Width = GL_RENDERBUFFER_WIDTH,
		Height = GL_RENDERBUFFER_HEIGHT,
		InternalFormat = GL_RENDERBUFFER_INTERNAL_FORMAT,
		Samples = GL_RENDERBUFFER_SAMPLES,
		RedSize = GL_RENDERBUFFER_RED_SIZE,
		GreenSize = GL_RENDERBUFFER_GREEN_SIZE,
		BlueSize = GL_RENDERBUFFER_BLUE_SIZE,
		AlphaSize = GL_RENDERBUFFER_ALPHA_SIZE,
		DepthSize = GL_RENDERBUFFER_DEPTH_SIZE,
		StencilSize = GL_RENDERBUFFER_STENCIL_SIZE,
	};
}
